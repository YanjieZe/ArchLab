                      | # Yanjie Ze 519021910706
                      | 
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x000: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x002: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x004: a06f         | 	pushl %esi		# Save callee-save regs
  0x006: a03f         | 	pushl %ebx
  0x008: a07f         | 	pushl %edi
  0x00a: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x010: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x016: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x01c: 6300         | 	xorl %eax,%eax		# count = 0;
  0x01e: 2027         | 	rrmovl %edx, %edi 	# limit = len
  0x020: c0f7f7ffffff | 	iaddl $-9, %edi     # limit = len - 10 + 1= len -9, k=1
  0x026: 713c010000   | 	jle restloop		# if limit<=0, goto rest:
                      | 
  0x02b: 506300000000 | loop1:	mrmovl (%ebx), %esi # read val from src
  0x031: 406100000000 | 		rmmovl %esi, (%ecx) # store
  0x037: 6266         | 		andl %esi, %esi # val <=0?
  0x039: 7144000000   | 		jle loop2 # if so, go to next loop
  0x03e: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x044: 506304000000 | loop2:	mrmovl 4(%ebx), %esi # read val from src
  0x04a: 406104000000 | 		rmmovl %esi, 4(%ecx) # store
  0x050: 6266         | 		andl %esi, %esi # val <=0?
  0x052: 715d000000   | 		jle loop3 # if so, go to next loop
  0x057: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x05d: 506308000000 | loop3:	mrmovl 8(%ebx), %esi # read val from src
  0x063: 406108000000 | 		rmmovl %esi, 8(%ecx) # store
  0x069: 6266         | 		andl %esi, %esi # val <=0?
  0x06b: 7176000000   | 		jle loop4 # if so, go to next loop
  0x070: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x076: 50630c000000 | loop4:	mrmovl 12(%ebx), %esi # read val from src
  0x07c: 40610c000000 | 		rmmovl %esi, 12(%ecx) # store
  0x082: 6266         | 		andl %esi, %esi # val <=0?
  0x084: 718f000000   | 		jle loop5 # if so, go to next loop
  0x089: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x08f: 506310000000 | loop5:	mrmovl 16(%ebx), %esi # read val from src
  0x095: 406110000000 | 		rmmovl %esi, 16(%ecx) # store
  0x09b: 6266         | 		andl %esi, %esi # val <=0?
  0x09d: 71a8000000   | 		jle loop6 # if so, go to next loop
  0x0a2: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0a8: 506314000000 | loop6:	mrmovl 20(%ebx), %esi # read val from src
  0x0ae: 406114000000 | 		rmmovl %esi, 20(%ecx) # store
  0x0b4: 6266         | 		andl %esi, %esi # val <=0?
  0x0b6: 71c1000000   | 		jle loop7 # if so, go to next loop
  0x0bb: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0c1: 506318000000 | loop7:	mrmovl 24(%ebx), %esi # read val from src
  0x0c7: 406118000000 | 		rmmovl %esi, 24(%ecx) # store
  0x0cd: 6266         | 		andl %esi, %esi # val <=0?
  0x0cf: 71da000000   | 		jle loop8 # if so, go to next loop
  0x0d4: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0da: 50631c000000 | loop8:	mrmovl 28(%ebx), %esi # read val from src
  0x0e0: 40611c000000 | 		rmmovl %esi, 28(%ecx) # store
  0x0e6: 6266         | 		andl %esi, %esi # val <=0?
  0x0e8: 71f3000000   | 		jle loop9 # if so, go to next loop
  0x0ed: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0f3: 506320000000 | loop9:	mrmovl 32(%ebx), %esi # read val from src
  0x0f9: 406120000000 | 		rmmovl %esi, 32(%ecx) # store
  0x0ff: 6266         | 		andl %esi, %esi # val <=0?
  0x101: 710c010000   | 		jle loop10 # if so, go to next loop
  0x106: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x10c: 506324000000 | loop10:	mrmovl 36(%ebx), %esi # read val from src
  0x112: 406124000000 | 		rmmovl %esi, 36(%ecx) # store
  0x118: 6266         | 		andl %esi, %esi # val <=0?
  0x11a: 7125010000   | 		jle update # if so, go to update, since this is the final loop
  0x11f: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x125: c0f328000000 | update: iaddl $40, %ebx # update
  0x12b: c0f128000000 | 		iaddl $40, %ecx
  0x131: c0f7f6ffffff | 		iaddl $-10, %edi # limit -= 10
  0x137: 752b000000   | 		jge loop1 # if limit > 0, go to new loop1
                      | 		
                      | 
  0x13c:              | restloop:	
  0x13c: 506300000000 | 	mrmovl (%ebx), %esi	# read val from src...
  0x142: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x148: 6266         | 	andl %esi, %esi		# val <= 0?
  0x14a: 7155010000   | 	jle Npos		# if so, goto Npos:
  0x14f: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x155: 30f701000000 | Npos:	irmovl $1, %edi
  0x15b: 6172         | 	subl %edi, %edx		# len--
  0x15d: c0f304000000 | 	iaddl $4, %ebx		# src++
  0x163: c0f104000000 | 	iaddl $4, %ecx		# dst++
  0x169: 6222         | 	andl %edx,%edx		# len > 0?
  0x16b: 763c010000   | 	jg restloop			# if so, goto Loop:
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x170:              | Done:
  0x170: b07f         | 	popl %edi               # Restore callee-save registers
  0x172: b03f         | 	popl %ebx
  0x174: b06f         | 	popl %esi
  0x176: 2054         | 	rrmovl %ebp, %esp
  0x178: b05f         | 	popl %ebp
  0x17a: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x17b:              | End:
                      | #/* $end ncopy-ys */

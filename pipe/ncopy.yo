                      | # Yanjie Ze 519021910706
                      | # score: 60/60, 
                      | # idea: loop unrolling 8 times + solving load use hazard 
                      | #		+ binary search
                      | 
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x000: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x002: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x004: a06f         | 	pushl %esi		# Save callee-save regs
  0x006: a03f         | 	pushl %ebx
  0x008: a07f         | 	pushl %edi
  0x00a: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x010: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x016: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x01c: 6300         | 	xorl %eax,%eax		# count = 0;
  0x01e: c0f2f8ffffff | 	iaddl $-8, %edx    # len = len - 6
  0x024: 7208010000   | 	jl restjudge		# if len<0, goto rest:
                      | 
  0x029: 506300000000 | loop1:	mrmovl (%ebx), %esi # val1
  0x02f: 507304000000 | 		mrmovl 4(%ebx), %edi # val2
  0x035: 406100000000 | 		rmmovl %esi, (%ecx) # store val1
  0x03b: 6266         | 		andl %esi, %esi # val1 <=0?
  0x03d: 7148000000   | 		jle loop2 # if so, go to next loop
  0x042: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x048: 506308000000 | loop2:	mrmovl 8(%ebx), %esi # val1
  0x04e: 407104000000 | 		rmmovl %edi, 4(%ecx) # store val2
  0x054: 6277         | 		andl %edi, %edi # val2 <=0?
  0x056: 7161000000   | 		jle loop3 # if so, go to next loop
  0x05b: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x061: 50730c000000 | loop3:	mrmovl 12(%ebx), %edi # val2
  0x067: 406108000000 | 		rmmovl %esi, 8(%ecx) # store val1
  0x06d: 6266         | 		andl %esi, %esi # val1 <=0?
  0x06f: 717a000000   | 		jle loop4 # if so, go to next loop
  0x074: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x07a: 506310000000 | loop4:	mrmovl 16(%ebx), %esi # val1
  0x080: 40710c000000 | 		rmmovl %edi, 12(%ecx) # store val2
  0x086: 6277         | 		andl %edi, %edi # val2 <=0?
  0x088: 7193000000   | 		jle loop5 # if so, go to next loop
  0x08d: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
                      | 
  0x093: 507314000000 | loop5:	mrmovl 20(%ebx), %edi # val2
  0x099: 406110000000 | 		rmmovl %esi, 16(%ecx) # store val1
  0x09f: 6266         | 		andl %esi, %esi # val1 <=0?
  0x0a1: 71ac000000   | 		jle loop6 # if so, go to next loop
  0x0a6: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0ac: 506318000000 | loop6:	mrmovl 24(%ebx), %esi # val1
  0x0b2: 407114000000 | 		rmmovl %edi, 20(%ecx) # store val2
  0x0b8: 6277         | 		andl %edi, %edi # val2 <=0?
  0x0ba: 71c5000000   | 		jle loop7 # if so, go to next loop
  0x0bf: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0c5: 50731c000000 | loop7:	mrmovl 28(%ebx), %edi # val2
  0x0cb: 406118000000 | 		rmmovl %esi, 24(%ecx) # store val1
  0x0d1: 6266         | 		andl %esi, %esi # val1 <=0?
  0x0d3: 71de000000   | 		jle loop8 # if so, go to next loop
  0x0d8: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
                      | 
  0x0de:              | loop8:	
  0x0de: 40711c000000 | 		rmmovl %edi, 28(%ecx) # store val2
  0x0e4: 6277         | 		andl %edi, %edi # val2 <=0?
  0x0e6: 71f1000000   | 		jle update # if so, go to update, since this is the final loop
  0x0eb: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0f1: c0f320000000 | update: iaddl $32, %ebx # update
  0x0f7: c0f120000000 | 		iaddl $32, %ecx # update
  0x0fd: c0f2f8ffffff | 		iaddl $-8, %edx # len -= 6
  0x103: 7529000000   | 		jge loop1 # if len >= 0, go to new loop1
                      | 		
                      | ### rest loop ###
  0x108:              | restjudge:
  0x108: c0f208000000 | 	iaddl $8, %edx # len<=0 before, len=len+6 >=0 now
  0x10e: 712c040000   | 	jle count0 # if len<=0, end; else need to finish the rest
                      | 
  0x113:              | searchmid:# possible value: 1,2,3,4,5, 6, 7
  0x113: c0f2fcffffff | 	iaddl $-4, %edx # sub 4: -3,-2,-1,0,1,2,3
  0x119: 73f2010000   | 	je restloop4 # len = 4, jump
  0x11e: 7238010000   | 	jl searchleft # len < 4, jump
                      | 
  0x123:              | searchright:# possible value: 1,2,3(5,6,7)
  0x123: c0f2feffffff | 	iaddl $-2, %edx
  0x129: 73dd020000   | 	je restloop6
  0x12e: 7678030000   | 	jg restloop7
  0x133: 725b020000   | 	jl restloop5
                      | 
  0x138:              | searchleft: # possible value: -3,-2,-1(1,2,3)
  0x138: c0f202000000 | 	iaddl $2, %edx # -1,0,1
  0x13e: 736b010000   | 	je restloop2
  0x143: 76a2010000   | 	jg restloop3
  0x148: 724d010000   | 	jl restloop1
                      | 
                      | ### search finish ###
                      | ### begin unrolling ###
  0x14d: 506300000000 | restloop1: 	mrmovl (%ebx), %esi 
  0x153: 406100000000 | 			rmmovl %esi, (%ecx)
  0x159: 6266         | 			andl %esi, %esi
  0x15b: 712c040000   | 			jle Done # finish
  0x160: c0f001000000 | 			iaddl $1, %eax 
  0x166: 702c040000   | 			jmp Done
                      | 
  0x16b: 506300000000 | restloop2:  mrmovl (%ebx), %esi # val1
  0x171: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x177: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x17d: 6266         | 			andl %esi, %esi # val1 <=0?
  0x17f: 718a010000   | 			jle restloop21 # if so, go to next loop
  0x184: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x18a: 407104000000 | restloop21: rmmovl %edi, 4(%ecx)
  0x190: 6277         | 			andl %edi, %edi
  0x192: 712c040000   | 			jle Done
  0x197: c0f001000000 | 			iaddl $1, %eax
  0x19d: 702c040000   | 			jmp Done
                      | 
  0x1a2: 506300000000 | restloop3:  mrmovl (%ebx), %esi # val1
  0x1a8: 507304000000 | 			mrmovl 4(%ebx), %edi # val2
  0x1ae: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x1b4: 6266         | 			andl %esi, %esi # val1 <=0?
  0x1b6: 71c1010000   | 			jle restloop31 # if so, go to next loop
  0x1bb: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x1c1: 407104000000 | restloop31: rmmovl %edi, 4(%ecx) # store val2
  0x1c7: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x1cd: 6277         | 			andl %edi, %edi
  0x1cf: 71da010000   | 			jle restloop32
  0x1d4: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x1da: 406108000000 | restloop32: rmmovl %esi, 8(%ecx)
  0x1e0: 6266         | 			andl %esi, %esi
  0x1e2: 712c040000   | 			jle Done
  0x1e7: c0f001000000 | 			iaddl $1, %eax
  0x1ed: 702c040000   | 			jmp Done
                      | 
  0x1f2: 506300000000 | restloop4:  mrmovl (%ebx), %esi # val1
  0x1f8: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x1fe: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x204: 6266         | 			andl %esi, %esi # val1 <=0?
  0x206: 7111020000   | 			jle restloop41 # if so, go to next loop
  0x20b: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x211: 407104000000 | restloop41: rmmovl %edi, 4(%ecx) # store val2
  0x217: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x21d: 6277         | 			andl %edi, %edi
  0x21f: 712a020000   | 			jle restloop42
  0x224: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x22a: 406108000000 | restloop42: rmmovl %esi, 8(%ecx) # store val1
  0x230: 50730c000000 | 			mrmovl 12(%ebx), %edi #val2
  0x236: 6266         | 			andl %esi, %esi
  0x238: 7143020000   | 			jle restloop43
  0x23d: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x243: 40710c000000 | restloop43: rmmovl %edi, 12(%ecx)
  0x249: 6277         | 			andl %edi, %edi
  0x24b: 712c040000   | 			jle Done
  0x250: c0f001000000 | 			iaddl $1, %eax
  0x256: 702c040000   | 			jmp Done
                      | 
  0x25b: 506300000000 | restloop5:  mrmovl (%ebx), %esi # val1
  0x261: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x267: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x26d: 6266         | 			andl %esi, %esi # val1 <=0?
  0x26f: 717a020000   | 			jle restloop51 # if so, go to next loop
  0x274: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x27a: 407104000000 | restloop51: rmmovl %edi, 4(%ecx) # store val2
  0x280: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x286: 6277         | 			andl %edi, %edi
  0x288: 7193020000   | 			jle restloop52
  0x28d: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x293: 406108000000 | restloop52: rmmovl %esi, 8(%ecx) # store val1
  0x299: 50730c000000 | 			mrmovl 12(%ebx), %edi #val2
  0x29f: 6266         | 			andl %esi, %esi
  0x2a1: 71ac020000   | 			jle restloop53
  0x2a6: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x2ac: 40710c000000 | restloop53: rmmovl %edi, 12(%ecx) 
  0x2b2: 506310000000 | 			mrmovl 16(%ebx), %esi 
  0x2b8: 6277         | 			andl %edi, %edi
  0x2ba: 71c5020000   | 			jle restloop54
  0x2bf: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x2c5: 406110000000 | restloop54: rmmovl %esi, 16(%ecx)
  0x2cb: 6266         | 			andl %esi, %esi
  0x2cd: 712c040000   | 			jle Done
  0x2d2: c0f001000000 | 			iaddl $1, %eax
  0x2d8: 702c040000   | 			jmp Done
                      | 
  0x2dd: 506300000000 | restloop6:  mrmovl (%ebx), %esi # val1
  0x2e3: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x2e9: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x2ef: 6266         | 			andl %esi, %esi # val1 <=0?
  0x2f1: 71fc020000   | 			jle restloop61 # if so, go to next loop
  0x2f6: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x2fc: 407104000000 | restloop61: rmmovl %edi, 4(%ecx) # store val2
  0x302: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x308: 6277         | 			andl %edi, %edi
  0x30a: 7115030000   | 			jle restloop62
  0x30f: c0f001000000 | 			iaddl $1, %eax
                      | 
                      | 
  0x315: 406108000000 | restloop62: rmmovl %esi, 8(%ecx) # store val1
  0x31b: 50730c000000 | 			mrmovl 12(%ebx), %edi #val2
  0x321: 6266         | 			andl %esi, %esi
  0x323: 712e030000   | 			jle restloop63
  0x328: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x32e: 40710c000000 | restloop63: rmmovl %edi, 12(%ecx) # store val2
  0x334: 506310000000 | 			mrmovl 16(%ebx), %esi #val1
  0x33a: 6277         | 			andl %edi, %edi
  0x33c: 7147030000   | 			jle restloop64
  0x341: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x347: 406110000000 | restloop64: rmmovl %esi, 16(%ecx) # store val1
  0x34d: 507314000000 | 			mrmovl 20(%ebx), %edi #val2
  0x353: 6266         | 			andl %esi, %esi
  0x355: 7160030000   | 			jle restloop65
  0x35a: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x360: 407114000000 | restloop65: rmmovl %edi, 20(%ecx)
  0x366: 6277         | 			andl %edi, %edi
  0x368: 712c040000   | 			jle Done
  0x36d: c0f001000000 | 			iaddl $1, %eax
  0x373: 702c040000   | 			jmp Done
                      | 
                      | 
  0x378: 506300000000 | restloop7:  mrmovl (%ebx), %esi # val1
  0x37e: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x384: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x38a: 6266         | 			andl %esi, %esi # val1 <=0?
  0x38c: 7197030000   | 			jle restloop71 # if so, go to next loop
  0x391: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x397: 407104000000 | restloop71: rmmovl %edi, 4(%ecx) # store val2
  0x39d: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x3a3: 6277         | 			andl %edi, %edi
  0x3a5: 71b0030000   | 			jle restloop72
  0x3aa: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x3b0: 406108000000 | restloop72: rmmovl %esi, 8(%ecx) # store val1
  0x3b6: 50730c000000 | 			mrmovl 12(%ebx), %edi #val2
  0x3bc: 6266         | 			andl %esi, %esi
  0x3be: 71c9030000   | 			jle restloop73
  0x3c3: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x3c9: 40710c000000 | restloop73: rmmovl %edi, 12(%ecx) # store val2
  0x3cf: 506310000000 | 			mrmovl 16(%ebx), %esi #val1
  0x3d5: 6277         | 			andl %edi, %edi
  0x3d7: 71e2030000   | 			jle restloop74
  0x3dc: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x3e2: 406110000000 | restloop74: rmmovl %esi, 16(%ecx) # store val1
  0x3e8: 507314000000 | 			mrmovl 20(%ebx), %edi #val2
  0x3ee: 6266         | 			andl %esi, %esi
  0x3f0: 71fb030000   | 			jle restloop75
  0x3f5: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x3fb: 407114000000 | restloop75: rmmovl %edi, 20(%ecx) 
  0x401: 506318000000 | 			mrmovl 24(%ebx), %esi 
  0x407: 6277         | 			andl %edi, %edi
  0x409: 7114040000   | 			jle restloop76
  0x40e: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x414: 406118000000 | restloop76: rmmovl %esi, 24(%ecx)
  0x41a: 6266         | 			andl %esi, %esi
  0x41c: 712c040000   | 			jle Done
  0x421: c0f001000000 | 			iaddl $1, %eax
  0x427: 702c040000   | 			jmp Done
                      | 
                      | ###
  0x42c:              | count0:
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x42c:              | Done:
  0x42c: b07f         | 	popl %edi               # Restore callee-save registers
  0x42e: b03f         | 	popl %ebx
  0x430: b06f         | 	popl %esi
  0x432: 2054         | 	rrmovl %ebp, %esp
  0x434: b05f         | 	popl %ebp
  0x436: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x437:              | End:
                      | #/* $end ncopy-ys */

                      | # Yanjie Ze 519021910706
                      | # score: 60/60, 9.21
                      | # idea: loop unrolling 6 times + solving load use hazard 
                      | #		+ binary search
                      | 
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x000: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x002: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x004: a06f         | 	pushl %esi		# Save callee-save regs
  0x006: a03f         | 	pushl %ebx
  0x008: a07f         | 	pushl %edi
  0x00a: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x010: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x016: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x01c: 6300         | 	xorl %eax,%eax		# count = 0;
  0x01e: c0f2faffffff | 	iaddl $-6, %edx    # len = len - 6
  0x024: 72d6000000   | 	jl restjudge		# if len<0, goto rest:
                      | 
  0x029: 506300000000 | loop1:	mrmovl (%ebx), %esi # val1
  0x02f: 507304000000 | 		mrmovl 4(%ebx), %edi # val2
  0x035: 406100000000 | 		rmmovl %esi, (%ecx) # store val1
  0x03b: 6266         | 		andl %esi, %esi # val1 <=0?
  0x03d: 7148000000   | 		jle loop2 # if so, go to next loop
  0x042: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x048: 506308000000 | loop2:	mrmovl 8(%ebx), %esi # val1
  0x04e: 407104000000 | 		rmmovl %edi, 4(%ecx) # store val2
  0x054: 6277         | 		andl %edi, %edi # val2 <=0?
  0x056: 7161000000   | 		jle loop3 # if so, go to next loop
  0x05b: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x061: 50730c000000 | loop3:	mrmovl 12(%ebx), %edi # val2
  0x067: 406108000000 | 		rmmovl %esi, 8(%ecx) # store val1
  0x06d: 6266         | 		andl %esi, %esi # val1 <=0?
  0x06f: 717a000000   | 		jle loop4 # if so, go to next loop
  0x074: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x07a: 506310000000 | loop4:	mrmovl 16(%ebx), %esi # val1
  0x080: 40710c000000 | 		rmmovl %edi, 12(%ecx) # store val2
  0x086: 6277         | 		andl %edi, %edi # val2 <=0?
  0x088: 7193000000   | 		jle loop5 # if so, go to next loop
  0x08d: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x093: 507314000000 | loop5:	mrmovl 20(%ebx), %edi # val2
  0x099: 406110000000 | 		rmmovl %esi, 16(%ecx) # store val1
  0x09f: 6266         | 		andl %esi, %esi # val1 <=0?
  0x0a1: 71ac000000   | 		jle loop6 # if so, go to next loop
  0x0a6: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
                      | 
  0x0ac:              | loop6:	
  0x0ac: 407114000000 | 		rmmovl %edi, 20(%ecx) # store val2
  0x0b2: 6277         | 		andl %edi, %edi # val2 <=0?
  0x0b4: 71bf000000   | 		jle update # if so, go to update, since this is the final loop
  0x0b9: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0bf: c0f318000000 | update: iaddl $24, %ebx # update
  0x0c5: c0f118000000 | 		iaddl $24, %ecx # update
  0x0cb: c0f2faffffff | 		iaddl $-6, %edx # len -= 6
  0x0d1: 7529000000   | 		jge loop1 # if len >= 0, go to new loop1
                      | 		
                      | ### rest loop ###
  0x0d6:              | restjudge:
  0x0d6: c0f206000000 | 	iaddl $6, %edx # len<=0 before, len=len+6 >=0 now
  0x0dc: 71a1020000   | 	jle count0 # if len<=0, end; else need to finish the rest
                      | 
  0x0e1:              | searchmid:# possible value: 1,2,3,4,5
  0x0e1: c0f2fdffffff | 	iaddl $-3, %edx # sub3: -2,-1,0,1,2
  0x0e7: 7366010000   | 	je restloop3 # len = 3, jump
  0x0ec: 7201010000   | 	jl searchleft # len < 3, jump
                      | 
  0x0f1:              | searchright:# possible value: 1,2(4,5)
  0x0f1: c0f2ffffffff | 	iaddl $-1, %edx
  0x0f7: 73b6010000   | 	je restloop4
  0x0fc: 701f020000   | 	jmp restloop5
                      | 
                      | 
  0x101:              | searchleft: # possible value: -2,-1(1,2)
  0x101: c0f202000000 | 	iaddl $2, %edx # 0,1
  0x107: 7311010000   | 	je restloop1
  0x10c: 702f010000   | 	jmp restloop2
                      | 
                      | ### search finish ###
                      | ### begin unrolling ###
  0x111: 506300000000 | restloop1: 	mrmovl (%ebx), %esi 
  0x117: 406100000000 | 			rmmovl %esi, (%ecx)
  0x11d: 6266         | 			andl %esi, %esi
  0x11f: 71a1020000   | 			jle Done # finish
  0x124: c0f001000000 | 			iaddl $1, %eax 
  0x12a: 70a1020000   | 			jmp Done
                      | 
  0x12f: 506300000000 | restloop2:  mrmovl (%ebx), %esi # val1
  0x135: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x13b: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x141: 6266         | 			andl %esi, %esi # val1 <=0?
  0x143: 714e010000   | 			jle restloop21 # if so, go to next loop
  0x148: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x14e: 407104000000 | restloop21: rmmovl %edi, 4(%ecx)
  0x154: 6277         | 			andl %edi, %edi
  0x156: 71a1020000   | 			jle Done
  0x15b: c0f001000000 | 			iaddl $1, %eax
  0x161: 70a1020000   | 			jmp Done
                      | 
  0x166: 506300000000 | restloop3:  mrmovl (%ebx), %esi # val1
  0x16c: 507304000000 | 			mrmovl 4(%ebx), %edi # val2
  0x172: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x178: 6266         | 			andl %esi, %esi # val1 <=0?
  0x17a: 7185010000   | 			jle restloop31 # if so, go to next loop
  0x17f: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x185: 407104000000 | restloop31: rmmovl %edi, 4(%ecx) # store val2
  0x18b: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x191: 6277         | 			andl %edi, %edi
  0x193: 719e010000   | 			jle restloop32
  0x198: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x19e: 406108000000 | restloop32: rmmovl %esi, 8(%ecx)
  0x1a4: 6266         | 			andl %esi, %esi
  0x1a6: 71a1020000   | 			jle Done
  0x1ab: c0f001000000 | 			iaddl $1, %eax
  0x1b1: 70a1020000   | 			jmp Done
                      | 
  0x1b6: 506300000000 | restloop4:  mrmovl (%ebx), %esi # val1
  0x1bc: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x1c2: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x1c8: 6266         | 			andl %esi, %esi # val1 <=0?
  0x1ca: 71d5010000   | 			jle restloop41 # if so, go to next loop
  0x1cf: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x1d5: 407104000000 | restloop41: rmmovl %edi, 4(%ecx) # store val2
  0x1db: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x1e1: 6277         | 			andl %edi, %edi
  0x1e3: 71ee010000   | 			jle restloop42
  0x1e8: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x1ee: 406108000000 | restloop42: rmmovl %esi, 8(%ecx) # store val1
  0x1f4: 50730c000000 | 			mrmovl 12(%ebx), %edi #val2
  0x1fa: 6266         | 			andl %esi, %esi
  0x1fc: 7107020000   | 			jle restloop43
  0x201: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x207: 40710c000000 | restloop43: rmmovl %edi, 12(%ecx)
  0x20d: 6277         | 			andl %edi, %edi
  0x20f: 71a1020000   | 			jle Done
  0x214: c0f001000000 | 			iaddl $1, %eax
  0x21a: 70a1020000   | 			jmp Done
                      | 
  0x21f: 506300000000 | restloop5:  mrmovl (%ebx), %esi # val1
  0x225: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x22b: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x231: 6266         | 			andl %esi, %esi # val1 <=0?
  0x233: 713e020000   | 			jle restloop51 # if so, go to next loop
  0x238: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x23e: 407104000000 | restloop51: rmmovl %edi, 4(%ecx) # store val2
  0x244: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x24a: 6277         | 			andl %edi, %edi
  0x24c: 7157020000   | 			jle restloop52
  0x251: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x257: 406108000000 | restloop52: rmmovl %esi, 8(%ecx) # store val1
  0x25d: 50730c000000 | 			mrmovl 12(%ebx), %edi #val2
  0x263: 6266         | 			andl %esi, %esi
  0x265: 7170020000   | 			jle restloop53
  0x26a: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x270: 40710c000000 | restloop53: rmmovl %edi, 12(%ecx) 
  0x276: 506310000000 | 			mrmovl 16(%ebx), %esi 
  0x27c: 6277         | 			andl %edi, %edi
  0x27e: 7189020000   | 			jle restloop54
  0x283: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x289: 406110000000 | restloop54: rmmovl %esi, 16(%ecx)
  0x28f: 6266         | 			andl %esi, %esi
  0x291: 71a1020000   | 			jle Done
  0x296: c0f001000000 | 			iaddl $1, %eax
  0x29c: 70a1020000   | 			jmp Done
                      | ###
  0x2a1:              | count0:
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x2a1:              | Done:
  0x2a1: b07f         | 	popl %edi               # Restore callee-save registers
  0x2a3: b03f         | 	popl %ebx
  0x2a5: b06f         | 	popl %esi
  0x2a7: 2054         | 	rrmovl %ebp, %esp
  0x2a9: b05f         | 	popl %ebp
  0x2ab: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x2ac:              | End:
                      | #/* $end ncopy-ys */

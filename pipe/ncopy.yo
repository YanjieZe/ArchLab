                      | # Yanjie Ze 519021910706
                      | # score: 60/60, 9.21
                      | # idea: loop unrolling 6 times + solving load use hazard 
                      | # + binary search
                      | 
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x000: a05f         | ncopy: pushl %ebp # Save old frame pointer
  0x002: 2045         | rrmovl %esp,%ebp # Set up new frame pointer
  0x004: a06f         | pushl %esi # Save callee-save regs
  0x006: a03f         | pushl %ebx
  0x008: a07f         | pushl %edi
  0x00a: 503508000000 | mrmovl 8(%ebp),%ebx # src
  0x010: 502510000000 | mrmovl 16(%ebp),%edx # len
  0x016: 50150c000000 | mrmovl 12(%ebp),%ecx # dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | # Loop header
  0x01c: 6300         | xorl %eax,%eax # count = 0;
  0x01e: c0f2faffffff | iaddl $-6, %edx # len = len - 6
  0x024: 72d6000000   | jl restjudge # if len<0, goto rest:
                      | 
  0x029: 506300000000 | loop1: mrmovl (%ebx), %esi # val1
  0x02f: 507304000000 | mrmovl 4(%ebx), %edi # val2
  0x035: 406100000000 | rmmovl %esi, (%ecx) # store val1
  0x03b: 6266         | andl %esi, %esi # val1 <=0?
  0x03d: 7148000000   | jle loop2 # if so, go to next loop
  0x042: c0f001000000 | iaddl $1, %eax # count ++
                      | 
  0x048: 506308000000 | loop2: mrmovl 8(%ebx), %esi # val1
  0x04e: 407104000000 | rmmovl %edi, 4(%ecx) # store val2
  0x054: 6277         | andl %edi, %edi # val2 <=0?
  0x056: 7161000000   | jle loop3 # if so, go to next loop
  0x05b: c0f001000000 | iaddl $1, %eax # count ++
                      | 
  0x061: 50730c000000 | loop3: mrmovl 12(%ebx), %edi # val2
  0x067: 406108000000 | rmmovl %esi, 8(%ecx) # store val1
  0x06d: 6266         | andl %esi, %esi # val1 <=0?
  0x06f: 717a000000   | jle loop4 # if so, go to next loop
  0x074: c0f001000000 | iaddl $1, %eax # count ++
                      | 
  0x07a: 506310000000 | loop4: mrmovl 16(%ebx), %esi # val1
  0x080: 40710c000000 | rmmovl %edi, 12(%ecx) # store val2
  0x086: 6277         | andl %edi, %edi # val2 <=0?
  0x088: 7193000000   | jle loop5 # if so, go to next loop
  0x08d: c0f001000000 | iaddl $1, %eax # count ++
                      | 
  0x093: 507314000000 | loop5: mrmovl 20(%ebx), %edi # val2
  0x099: 406110000000 | rmmovl %esi, 16(%ecx) # store val1
  0x09f: 6266         | andl %esi, %esi # val1 <=0?
  0x0a1: 71ac000000   | jle loop6 # if so, go to next loop
  0x0a6: c0f001000000 | iaddl $1, %eax # count ++
                      | 
  0x0ac:              | loop6: 
  0x0ac: 407114000000 | rmmovl %edi, 20(%ecx) # store val2
  0x0b2: 6277         | andl %edi, %edi # val2 <=0?
  0x0b4: 71bf000000   | jle update # if so, go to update, since this is the final loop
  0x0b9: c0f001000000 | iaddl $1, %eax # count ++
                      | 
  0x0bf: c0f318000000 | update: iaddl $24, %ebx # update
  0x0c5: c0f118000000 | iaddl $24, %ecx # update
  0x0cb: c0f2faffffff | iaddl $-6, %edx # len -= 6
  0x0d1: 7529000000   | jge loop1 # if len >= 0, go to new loop1
                      | ### rest loop ###
                      | # binary search
  0x0d6:              | restjudge:
  0x0d6: c0f203000000 | 	iaddl $3, %edx
  0x0dc: 72f6000000   | 	jl searchleft
  0x0e1: 7360010000   | 	je restloop3
  0x0e6: c0f2ffffffff | 	iaddl $-1, %edx
  0x0ec: 73b0010000   | 	je restloop4
  0x0f1: 7019020000   | 	jmp restloop5
  0x0f6:              | searchleft:
  0x0f6: c0f202000000 | 	iaddl $2, %edx
  0x0fc: 730b010000   | 	je restloop1
  0x101: 729b020000   | 	jl Done
  0x106: 7029010000   | 	jmp restloop2
                      | 
                      | 
                      | ### search finish ###
                      | ### begin unrolling ###
  0x10b: 506300000000 | restloop1: mrmovl (%ebx), %esi 
  0x111: 406100000000 | rmmovl %esi, (%ecx)
  0x117: 6266         | andl %esi, %esi
  0x119: 719b020000   | jle Done # finish
  0x11e: c0f001000000 | iaddl $1, %eax 
  0x124: 709b020000   | jmp Done
                      | 
  0x129: 506300000000 | restloop2: mrmovl (%ebx), %esi # val1
  0x12f: 507304000000 | mrmovl 4(%ebx), %edi # val2
  0x135: 406100000000 | rmmovl %esi, (%ecx) # store val1
  0x13b: 6266         | andl %esi, %esi # val1 <=0?
  0x13d: 7148010000   | jle restloop21 # if so, go to next loop
  0x142: c0f001000000 | iaddl $1, %eax # count ++
                      | 
  0x148: 407104000000 | restloop21: rmmovl %edi, 4(%ecx)
  0x14e: 6277         | andl %edi, %edi
  0x150: 719b020000   | jle Done
  0x155: c0f001000000 | iaddl $1, %eax
  0x15b: 709b020000   | jmp Done
                      | 
  0x160: 506300000000 | restloop3: mrmovl (%ebx), %esi # val1
  0x166: 507304000000 | mrmovl 4(%ebx), %edi # val2
  0x16c: 406100000000 | rmmovl %esi, (%ecx) # store val1
  0x172: 6266         | andl %esi, %esi # val1 <=0?
  0x174: 717f010000   | jle restloop31 # if so, go to next loop
  0x179: c0f001000000 | iaddl $1, %eax # count ++
                      | 
  0x17f: 407104000000 | restloop31: rmmovl %edi, 4(%ecx) # store val2
  0x185: 506308000000 | mrmovl 8(%ebx), %esi #val1
  0x18b: 6277         | andl %edi, %edi
  0x18d: 7198010000   | jle restloop32
  0x192: c0f001000000 | iaddl $1, %eax
                      | 
  0x198: 406108000000 | restloop32: rmmovl %esi, 8(%ecx)
  0x19e: 6266         | andl %esi, %esi
  0x1a0: 719b020000   | jle Done
  0x1a5: c0f001000000 | iaddl $1, %eax
  0x1ab: 709b020000   | jmp Done
                      | 
  0x1b0: 506300000000 | restloop4: mrmovl (%ebx), %esi # val1
  0x1b6: 507304000000 | mrmovl 4(%ebx), %edi # val2
  0x1bc: 406100000000 | rmmovl %esi, (%ecx) # store val1
  0x1c2: 6266         | andl %esi, %esi # val1 <=0?
  0x1c4: 71cf010000   | jle restloop41 # if so, go to next loop
  0x1c9: c0f001000000 | iaddl $1, %eax # count ++
                      | 
  0x1cf: 407104000000 | restloop41: rmmovl %edi, 4(%ecx) # store val2
  0x1d5: 506308000000 | mrmovl 8(%ebx), %esi #val1
  0x1db: 6277         | andl %edi, %edi
  0x1dd: 71e8010000   | jle restloop42
  0x1e2: c0f001000000 | iaddl $1, %eax
                      | 
  0x1e8: 406108000000 | restloop42: rmmovl %esi, 8(%ecx) # store val1
  0x1ee: 50730c000000 | mrmovl 12(%ebx), %edi #val2
  0x1f4: 6266         | andl %esi, %esi
  0x1f6: 7101020000   | jle restloop43
  0x1fb: c0f001000000 | iaddl $1, %eax
                      | 
  0x201: 40710c000000 | restloop43: rmmovl %edi, 12(%ecx)
  0x207: 6277         | andl %edi, %edi
  0x209: 719b020000   | jle Done
  0x20e: c0f001000000 | iaddl $1, %eax
  0x214: 709b020000   | jmp Done
                      | 
  0x219: 506300000000 | restloop5: mrmovl (%ebx), %esi # val1
  0x21f: 507304000000 | mrmovl 4(%ebx), %edi # val2
  0x225: 406100000000 | rmmovl %esi, (%ecx) # store val1
  0x22b: 6266         | andl %esi, %esi # val1 <=0?
  0x22d: 7138020000   | jle restloop51 # if so, go to next loop
  0x232: c0f001000000 | iaddl $1, %eax # count ++
                      | 
  0x238: 407104000000 | restloop51: rmmovl %edi, 4(%ecx) # store val2
  0x23e: 506308000000 | mrmovl 8(%ebx), %esi #val1
  0x244: 6277         | andl %edi, %edi
  0x246: 7151020000   | jle restloop52
  0x24b: c0f001000000 | iaddl $1, %eax
                      | 
  0x251: 406108000000 | restloop52: rmmovl %esi, 8(%ecx) # store val1
  0x257: 50730c000000 | mrmovl 12(%ebx), %edi #val2
  0x25d: 6266         | andl %esi, %esi
  0x25f: 716a020000   | jle restloop53
  0x264: c0f001000000 | iaddl $1, %eax
                      | 
  0x26a: 40710c000000 | restloop53: rmmovl %edi, 12(%ecx) 
  0x270: 506310000000 | mrmovl 16(%ebx), %esi 
  0x276: 6277         | andl %edi, %edi
  0x278: 7183020000   | jle restloop54
  0x27d: c0f001000000 | iaddl $1, %eax
                      | 
  0x283: 406110000000 | restloop54: rmmovl %esi, 16(%ecx)
  0x289: 6266         | andl %esi, %esi
  0x28b: 719b020000   | jle Done
  0x290: c0f001000000 | iaddl $1, %eax
  0x296: 709b020000   | jmp Done
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x29b:              | Done:
  0x29b: b07f         | popl %edi # Restore callee-save registers
  0x29d: b03f         | popl %ebx
  0x29f: b06f         | popl %esi
  0x2a1: 2054         | rrmovl %ebp, %esp
  0x2a3: b05f         | popl %ebp
  0x2a5: 90           | ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x2a6:              | End:
                      | #/* $end ncopy-ys */
                      | 

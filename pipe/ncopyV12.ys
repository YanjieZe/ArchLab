# Yanjie Ze 519021910706
# score: 60/60, 9.89
# idea: loop unrolling 4 times + solving load use hazard

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	iaddl $-4, %edx    # len = len - 4
	jl restjudge		# if len<0, goto rest:

loop1:	mrmovl (%ebx), %esi # val1
		mrmovl 4(%ebx), %edi # val2
		rmmovl %esi, (%ecx) # store val1
		andl %esi, %esi # val1 <=0?
		jle loop2 # if so, go to next loop
		iaddl $1, %eax # count ++

loop2:	mrmovl 8(%ebx), %esi # val1
		rmmovl %edi, 4(%ecx) # store val2
		andl %edi, %edi # val2 <=0?
		jle loop3 # if so, go to next loop
		iaddl $1, %eax # count ++

loop3:	mrmovl 12(%ebx), %edi # val2
		rmmovl %esi, 8(%ecx) # store val1
		andl %esi, %esi # val1 <=0?
		jle loop4 # if so, go to next loop
		iaddl $1, %eax # count ++


loop4:	
		rmmovl %edi, 12(%ecx) # store val2
		andl %edi, %edi # val2 <=0?
		jle update # if so, go to update, since this is the final loop
		iaddl $1, %eax # count ++

update: iaddl $16, %ebx # update
		iaddl $16, %ecx # update
		iaddl $-4, %edx # len -= 6
		jge loop1 # if len >= 0, go to new loop1
		
### rest loop ###
restjudge:
	iaddl $4, %edx # len<=0 for now, len=len+4 >=0
	jle count0 # if len<=0, end; else need to finish the rest

restloop:
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddl $1, %eax		# count++

Npos:	irmovl $1, %edi
	subl %edi, %edx		# len--
	iaddl $4, %ebx		# src++
	iaddl $4, %ecx		# dst++
	andl %edx,%edx		# len > 0?
	jg restloop			# if so, goto Loop:

count0:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */

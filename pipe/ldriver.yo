                      | #######################################################################
                      | # Test for copying block of size 63;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f444030000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f544030000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f03f000000 | 	irmovl $63, %eax		# src and dst have 63 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f004020000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f000010000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | # Yanjie Ze 519021910706
                      | # score: 60/60, 
                      | # idea: loop unrolling 3 times + solving load use hazard
                      | 
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x046: 6300         | 	xorl %eax,%eax		# count = 0;
  0x048: c0f2fdffffff | 	iaddl $-3, %edx    # len = len - 3
  0x04e: 72b5000000   | 	jl restjudge		# if len<0, goto rest:
                      | 
  0x053: 506300000000 | loop1:	mrmovl (%ebx), %esi # val1
  0x059: 507304000000 | 		mrmovl 4(%ebx), %edi # val2
  0x05f: 406100000000 | 		rmmovl %esi, (%ecx) # store val1
  0x065: 6266         | 		andl %esi, %esi # val1 <=0?
  0x067: 7172000000   | 		jle loop2 # if so, go to next loop
  0x06c: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x072: 506308000000 | loop2:	mrmovl 8(%ebx), %esi # val1
  0x078: 407104000000 | 		rmmovl %edi, 4(%ecx) # store val2
  0x07e: 6277         | 		andl %edi, %edi # val2 <=0?
  0x080: 718b000000   | 		jle loop3 # if so, go to next loop
  0x085: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x08b:              | loop3:	
  0x08b: 406108000000 | 		rmmovl %esi, 8(%ecx) # store val1
  0x091: 6266         | 		andl %esi, %esi # val1 <=0?
  0x093: 719e000000   | 		jle update # if so, go to update, since this is the final loop
  0x098: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x09e: c0f30c000000 | update: iaddl $12, %ebx # update
  0x0a4: c0f10c000000 | 		iaddl $12, %ecx # update
  0x0aa: c0f2fdffffff | 		iaddl $-3, %edx # len -= 5
  0x0b0: 7553000000   | 		jge loop1 # if len >= 0, go to new loop1
                      | 		
                      | ### rest loop ###
  0x0b5:              | restjudge:
  0x0b5: c0f203000000 | 	iaddl $3, %edx # len<=0 for now, len=len+6 >=0
  0x0bb: 71f4000000   | 	jle count0 # if len<=0, end; else need to finish the rest
                      | 
  0x0c0:              | restloop:
  0x0c0: 506300000000 | 	mrmovl (%ebx), %esi	# read val from src...
  0x0c6: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x0cc: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0ce: 71d9000000   | 	jle Npos		# if so, goto Npos:
  0x0d3: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x0d9: 30f701000000 | Npos:	irmovl $1, %edi
  0x0df: 6172         | 	subl %edi, %edx		# len--
  0x0e1: c0f304000000 | 	iaddl $4, %ebx		# src++
  0x0e7: c0f104000000 | 	iaddl $4, %ecx		# dst++
  0x0ed: 6222         | 	andl %edx,%edx		# len > 0?
  0x0ef: 76c0000000   | 	jg restloop			# if so, goto Loop:
                      | 
  0x0f4:              | count0:
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x0f4:              | Done:
  0x0f4: b07f         | 	popl %edi               # Restore callee-save registers
  0x0f6: b03f         | 	popl %ebx
  0x0f8: b06f         | 	popl %esi
  0x0fa: 2054         | 	rrmovl %ebp, %esp
  0x0fc: b05f         | 	popl %ebp
  0x0fe: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x0ff:              | End:
                      | #/* $end ncopy-ys */
  0x0ff:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x100:              | 	.align 4
  0x100:              | src:
  0x100: 01000000     | 	.long 1
  0x104: feffffff     | 	.long -2
  0x108: fdffffff     | 	.long -3
  0x10c: 04000000     | 	.long 4
  0x110: fbffffff     | 	.long -5
  0x114: 06000000     | 	.long 6
  0x118: 07000000     | 	.long 7
  0x11c: 08000000     | 	.long 8
  0x120: 09000000     | 	.long 9
  0x124: 0a000000     | 	.long 10
  0x128: 0b000000     | 	.long 11
  0x12c: f4ffffff     | 	.long -12
  0x130: f3ffffff     | 	.long -13
  0x134: f2ffffff     | 	.long -14
  0x138: f1ffffff     | 	.long -15
  0x13c: f0ffffff     | 	.long -16
  0x140: 11000000     | 	.long 17
  0x144: eeffffff     | 	.long -18
  0x148: edffffff     | 	.long -19
  0x14c: ecffffff     | 	.long -20
  0x150: ebffffff     | 	.long -21
  0x154: 16000000     | 	.long 22
  0x158: 17000000     | 	.long 23
  0x15c: 18000000     | 	.long 24
  0x160: e7ffffff     | 	.long -25
  0x164: e6ffffff     | 	.long -26
  0x168: e5ffffff     | 	.long -27
  0x16c: e4ffffff     | 	.long -28
  0x170: 1d000000     | 	.long 29
  0x174: 1e000000     | 	.long 30
  0x178: 1f000000     | 	.long 31
  0x17c: e0ffffff     | 	.long -32
  0x180: dfffffff     | 	.long -33
  0x184: 22000000     | 	.long 34
  0x188: ddffffff     | 	.long -35
  0x18c: dcffffff     | 	.long -36
  0x190: 25000000     | 	.long 37
  0x194: 26000000     | 	.long 38
  0x198: 27000000     | 	.long 39
  0x19c: 28000000     | 	.long 40
  0x1a0: d7ffffff     | 	.long -41
  0x1a4: d6ffffff     | 	.long -42
  0x1a8: 2b000000     | 	.long 43
  0x1ac: 2c000000     | 	.long 44
  0x1b0: 2d000000     | 	.long 45
  0x1b4: 2e000000     | 	.long 46
  0x1b8: d1ffffff     | 	.long -47
  0x1bc: d0ffffff     | 	.long -48
  0x1c0: 31000000     | 	.long 49
  0x1c4: ceffffff     | 	.long -50
  0x1c8: cdffffff     | 	.long -51
  0x1cc: ccffffff     | 	.long -52
  0x1d0: 35000000     | 	.long 53
  0x1d4: caffffff     | 	.long -54
  0x1d8: 37000000     | 	.long 55
  0x1dc: 38000000     | 	.long 56
  0x1e0: c7ffffff     | 	.long -57
  0x1e4: c6ffffff     | 	.long -58
  0x1e8: c5ffffff     | 	.long -59
  0x1ec: c4ffffff     | 	.long -60
  0x1f0: 3d000000     | 	.long 61
  0x1f4: 3e000000     | 	.long 62
  0x1f8: 3f000000     | 	.long 63
  0x1fc: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x200:              | 	.align 16
  0x200:              | Predest:
  0x200: fadebc00     | 	.long 0xbcdefa
  0x204:              | dest:
  0x204: abefcd00     | 	.long 0xcdefab
  0x208: abefcd00     | 	.long 0xcdefab
  0x20c: abefcd00     | 	.long 0xcdefab
  0x210: abefcd00     | 	.long 0xcdefab
  0x214: abefcd00     | 	.long 0xcdefab
  0x218: abefcd00     | 	.long 0xcdefab
  0x21c: abefcd00     | 	.long 0xcdefab
  0x220: abefcd00     | 	.long 0xcdefab
  0x224: abefcd00     | 	.long 0xcdefab
  0x228: abefcd00     | 	.long 0xcdefab
  0x22c: abefcd00     | 	.long 0xcdefab
  0x230: abefcd00     | 	.long 0xcdefab
  0x234: abefcd00     | 	.long 0xcdefab
  0x238: abefcd00     | 	.long 0xcdefab
  0x23c: abefcd00     | 	.long 0xcdefab
  0x240: abefcd00     | 	.long 0xcdefab
  0x244: abefcd00     | 	.long 0xcdefab
  0x248: abefcd00     | 	.long 0xcdefab
  0x24c: abefcd00     | 	.long 0xcdefab
  0x250: abefcd00     | 	.long 0xcdefab
  0x254: abefcd00     | 	.long 0xcdefab
  0x258: abefcd00     | 	.long 0xcdefab
  0x25c: abefcd00     | 	.long 0xcdefab
  0x260: abefcd00     | 	.long 0xcdefab
  0x264: abefcd00     | 	.long 0xcdefab
  0x268: abefcd00     | 	.long 0xcdefab
  0x26c: abefcd00     | 	.long 0xcdefab
  0x270: abefcd00     | 	.long 0xcdefab
  0x274: abefcd00     | 	.long 0xcdefab
  0x278: abefcd00     | 	.long 0xcdefab
  0x27c: abefcd00     | 	.long 0xcdefab
  0x280: abefcd00     | 	.long 0xcdefab
  0x284: abefcd00     | 	.long 0xcdefab
  0x288: abefcd00     | 	.long 0xcdefab
  0x28c: abefcd00     | 	.long 0xcdefab
  0x290: abefcd00     | 	.long 0xcdefab
  0x294: abefcd00     | 	.long 0xcdefab
  0x298: abefcd00     | 	.long 0xcdefab
  0x29c: abefcd00     | 	.long 0xcdefab
  0x2a0: abefcd00     | 	.long 0xcdefab
  0x2a4: abefcd00     | 	.long 0xcdefab
  0x2a8: abefcd00     | 	.long 0xcdefab
  0x2ac: abefcd00     | 	.long 0xcdefab
  0x2b0: abefcd00     | 	.long 0xcdefab
  0x2b4: abefcd00     | 	.long 0xcdefab
  0x2b8: abefcd00     | 	.long 0xcdefab
  0x2bc: abefcd00     | 	.long 0xcdefab
  0x2c0: abefcd00     | 	.long 0xcdefab
  0x2c4: abefcd00     | 	.long 0xcdefab
  0x2c8: abefcd00     | 	.long 0xcdefab
  0x2cc: abefcd00     | 	.long 0xcdefab
  0x2d0: abefcd00     | 	.long 0xcdefab
  0x2d4: abefcd00     | 	.long 0xcdefab
  0x2d8: abefcd00     | 	.long 0xcdefab
  0x2dc: abefcd00     | 	.long 0xcdefab
  0x2e0: abefcd00     | 	.long 0xcdefab
  0x2e4: abefcd00     | 	.long 0xcdefab
  0x2e8: abefcd00     | 	.long 0xcdefab
  0x2ec: abefcd00     | 	.long 0xcdefab
  0x2f0: abefcd00     | 	.long 0xcdefab
  0x2f4: abefcd00     | 	.long 0xcdefab
  0x2f8: abefcd00     | 	.long 0xcdefab
  0x2fc: abefcd00     | 	.long 0xcdefab
  0x300:              | Postdest:
  0x300: bcfade00     | 	.long 0xdefabc
                      | 
  0x304:              | .align 4
                      | # Run time stack
  0x304: 00000000     | 	.long 0
  0x308: 00000000     | 	.long 0
  0x30c: 00000000     | 	.long 0
  0x310: 00000000     | 	.long 0
  0x314: 00000000     | 	.long 0
  0x318: 00000000     | 	.long 0
  0x31c: 00000000     | 	.long 0
  0x320: 00000000     | 	.long 0
  0x324: 00000000     | 	.long 0
  0x328: 00000000     | 	.long 0
  0x32c: 00000000     | 	.long 0
  0x330: 00000000     | 	.long 0
  0x334: 00000000     | 	.long 0
  0x338: 00000000     | 	.long 0
  0x33c: 00000000     | 	.long 0
  0x340: 00000000     | 	.long 0
                      | 
  0x344:              | Stack:

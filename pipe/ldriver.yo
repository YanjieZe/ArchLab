                      | #######################################################################
                      | # Test for copying block of size 63;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f4b4060000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f5b4060000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f03f000000 | 	irmovl $63, %eax		# src and dst have 63 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f074050000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f064040000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | # Yanjie Ze 519021910706
                      | # score: 60/60, 
                      | # idea: loop unrolling 8 times + solving load use hazard 
                      | #		+ binary search
                      | 
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x046: 6300         | 	xorl %eax,%eax		# count = 0;
  0x048: c0f2f8ffffff | 	iaddl $-8, %edx    # len = len - 6
  0x04e: 7232010000   | 	jl restjudge		# if len<0, goto rest:
                      | 
  0x053: 506300000000 | loop1:	mrmovl (%ebx), %esi # val1
  0x059: 507304000000 | 		mrmovl 4(%ebx), %edi # val2
  0x05f: 406100000000 | 		rmmovl %esi, (%ecx) # store val1
  0x065: 6266         | 		andl %esi, %esi # val1 <=0?
  0x067: 7172000000   | 		jle loop2 # if so, go to next loop
  0x06c: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x072: 506308000000 | loop2:	mrmovl 8(%ebx), %esi # val1
  0x078: 407104000000 | 		rmmovl %edi, 4(%ecx) # store val2
  0x07e: 6277         | 		andl %edi, %edi # val2 <=0?
  0x080: 718b000000   | 		jle loop3 # if so, go to next loop
  0x085: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x08b: 50730c000000 | loop3:	mrmovl 12(%ebx), %edi # val2
  0x091: 406108000000 | 		rmmovl %esi, 8(%ecx) # store val1
  0x097: 6266         | 		andl %esi, %esi # val1 <=0?
  0x099: 71a4000000   | 		jle loop4 # if so, go to next loop
  0x09e: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0a4: 506310000000 | loop4:	mrmovl 16(%ebx), %esi # val1
  0x0aa: 40710c000000 | 		rmmovl %edi, 12(%ecx) # store val2
  0x0b0: 6277         | 		andl %edi, %edi # val2 <=0?
  0x0b2: 71bd000000   | 		jle loop5 # if so, go to next loop
  0x0b7: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
                      | 
  0x0bd: 507314000000 | loop5:	mrmovl 20(%ebx), %edi # val2
  0x0c3: 406110000000 | 		rmmovl %esi, 16(%ecx) # store val1
  0x0c9: 6266         | 		andl %esi, %esi # val1 <=0?
  0x0cb: 71d6000000   | 		jle loop6 # if so, go to next loop
  0x0d0: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0d6: 506318000000 | loop6:	mrmovl 24(%ebx), %esi # val1
  0x0dc: 407114000000 | 		rmmovl %edi, 20(%ecx) # store val2
  0x0e2: 6277         | 		andl %edi, %edi # val2 <=0?
  0x0e4: 71ef000000   | 		jle loop7 # if so, go to next loop
  0x0e9: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0ef: 50731c000000 | loop7:	mrmovl 28(%ebx), %edi # val2
  0x0f5: 406118000000 | 		rmmovl %esi, 24(%ecx) # store val1
  0x0fb: 6266         | 		andl %esi, %esi # val1 <=0?
  0x0fd: 7108010000   | 		jle loop8 # if so, go to next loop
  0x102: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
                      | 
  0x108:              | loop8:	
  0x108: 40711c000000 | 		rmmovl %edi, 28(%ecx) # store val2
  0x10e: 6277         | 		andl %edi, %edi # val2 <=0?
  0x110: 711b010000   | 		jle update # if so, go to update, since this is the final loop
  0x115: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x11b: c0f320000000 | update: iaddl $32, %ebx # update
  0x121: c0f120000000 | 		iaddl $32, %ecx # update
  0x127: c0f2f8ffffff | 		iaddl $-8, %edx # len -= 6
  0x12d: 7553000000   | 		jge loop1 # if len >= 0, go to new loop1
                      | 		
                      | ### rest loop ###
  0x132:              | restjudge:
  0x132: c0f208000000 | 	iaddl $8, %edx # len<=0 before, len=len+6 >=0 now
  0x138: 7156040000   | 	jle count0 # if len<=0, end; else need to finish the rest
                      | 
  0x13d:              | searchmid:# possible value: 1,2,3,4,5, 6, 7
  0x13d: c0f2fcffffff | 	iaddl $-4, %edx # sub 4: -3,-2,-1,0,1,2,3
  0x143: 731c020000   | 	je restloop4 # len = 4, jump
  0x148: 7262010000   | 	jl searchleft # len < 4, jump
                      | 
  0x14d:              | searchright:# possible value: 1,2,3(5,6,7)
  0x14d: c0f2feffffff | 	iaddl $-2, %edx
  0x153: 7307030000   | 	je restloop6
  0x158: 76a2030000   | 	jg restloop7
  0x15d: 7285020000   | 	jl restloop5
                      | 
  0x162:              | searchleft: # possible value: -3,-2,-1(1,2,3)
  0x162: c0f202000000 | 	iaddl $2, %edx # -1,0,1
  0x168: 7395010000   | 	je restloop2
  0x16d: 76cc010000   | 	jg restloop3
  0x172: 7277010000   | 	jl restloop1
                      | 
                      | ### search finish ###
                      | ### begin unrolling ###
  0x177: 506300000000 | restloop1: 	mrmovl (%ebx), %esi 
  0x17d: 406100000000 | 			rmmovl %esi, (%ecx)
  0x183: 6266         | 			andl %esi, %esi
  0x185: 7156040000   | 			jle Done # finish
  0x18a: c0f001000000 | 			iaddl $1, %eax 
  0x190: 7056040000   | 			jmp Done
                      | 
  0x195: 506300000000 | restloop2:  mrmovl (%ebx), %esi # val1
  0x19b: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x1a1: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x1a7: 6266         | 			andl %esi, %esi # val1 <=0?
  0x1a9: 71b4010000   | 			jle restloop21 # if so, go to next loop
  0x1ae: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x1b4: 407104000000 | restloop21: rmmovl %edi, 4(%ecx)
  0x1ba: 6277         | 			andl %edi, %edi
  0x1bc: 7156040000   | 			jle Done
  0x1c1: c0f001000000 | 			iaddl $1, %eax
  0x1c7: 7056040000   | 			jmp Done
                      | 
  0x1cc: 506300000000 | restloop3:  mrmovl (%ebx), %esi # val1
  0x1d2: 507304000000 | 			mrmovl 4(%ebx), %edi # val2
  0x1d8: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x1de: 6266         | 			andl %esi, %esi # val1 <=0?
  0x1e0: 71eb010000   | 			jle restloop31 # if so, go to next loop
  0x1e5: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x1eb: 407104000000 | restloop31: rmmovl %edi, 4(%ecx) # store val2
  0x1f1: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x1f7: 6277         | 			andl %edi, %edi
  0x1f9: 7104020000   | 			jle restloop32
  0x1fe: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x204: 406108000000 | restloop32: rmmovl %esi, 8(%ecx)
  0x20a: 6266         | 			andl %esi, %esi
  0x20c: 7156040000   | 			jle Done
  0x211: c0f001000000 | 			iaddl $1, %eax
  0x217: 7056040000   | 			jmp Done
                      | 
  0x21c: 506300000000 | restloop4:  mrmovl (%ebx), %esi # val1
  0x222: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x228: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x22e: 6266         | 			andl %esi, %esi # val1 <=0?
  0x230: 713b020000   | 			jle restloop41 # if so, go to next loop
  0x235: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x23b: 407104000000 | restloop41: rmmovl %edi, 4(%ecx) # store val2
  0x241: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x247: 6277         | 			andl %edi, %edi
  0x249: 7154020000   | 			jle restloop42
  0x24e: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x254: 406108000000 | restloop42: rmmovl %esi, 8(%ecx) # store val1
  0x25a: 50730c000000 | 			mrmovl 12(%ebx), %edi #val2
  0x260: 6266         | 			andl %esi, %esi
  0x262: 716d020000   | 			jle restloop43
  0x267: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x26d: 40710c000000 | restloop43: rmmovl %edi, 12(%ecx)
  0x273: 6277         | 			andl %edi, %edi
  0x275: 7156040000   | 			jle Done
  0x27a: c0f001000000 | 			iaddl $1, %eax
  0x280: 7056040000   | 			jmp Done
                      | 
  0x285: 506300000000 | restloop5:  mrmovl (%ebx), %esi # val1
  0x28b: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x291: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x297: 6266         | 			andl %esi, %esi # val1 <=0?
  0x299: 71a4020000   | 			jle restloop51 # if so, go to next loop
  0x29e: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x2a4: 407104000000 | restloop51: rmmovl %edi, 4(%ecx) # store val2
  0x2aa: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x2b0: 6277         | 			andl %edi, %edi
  0x2b2: 71bd020000   | 			jle restloop52
  0x2b7: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x2bd: 406108000000 | restloop52: rmmovl %esi, 8(%ecx) # store val1
  0x2c3: 50730c000000 | 			mrmovl 12(%ebx), %edi #val2
  0x2c9: 6266         | 			andl %esi, %esi
  0x2cb: 71d6020000   | 			jle restloop53
  0x2d0: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x2d6: 40710c000000 | restloop53: rmmovl %edi, 12(%ecx) 
  0x2dc: 506310000000 | 			mrmovl 16(%ebx), %esi 
  0x2e2: 6277         | 			andl %edi, %edi
  0x2e4: 71ef020000   | 			jle restloop54
  0x2e9: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x2ef: 406110000000 | restloop54: rmmovl %esi, 16(%ecx)
  0x2f5: 6266         | 			andl %esi, %esi
  0x2f7: 7156040000   | 			jle Done
  0x2fc: c0f001000000 | 			iaddl $1, %eax
  0x302: 7056040000   | 			jmp Done
                      | 
  0x307: 506300000000 | restloop6:  mrmovl (%ebx), %esi # val1
  0x30d: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x313: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x319: 6266         | 			andl %esi, %esi # val1 <=0?
  0x31b: 7126030000   | 			jle restloop61 # if so, go to next loop
  0x320: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x326: 407104000000 | restloop61: rmmovl %edi, 4(%ecx) # store val2
  0x32c: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x332: 6277         | 			andl %edi, %edi
  0x334: 713f030000   | 			jle restloop62
  0x339: c0f001000000 | 			iaddl $1, %eax
                      | 
                      | 
  0x33f: 406108000000 | restloop62: rmmovl %esi, 8(%ecx) # store val1
  0x345: 50730c000000 | 			mrmovl 12(%ebx), %edi #val2
  0x34b: 6266         | 			andl %esi, %esi
  0x34d: 7158030000   | 			jle restloop63
  0x352: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x358: 40710c000000 | restloop63: rmmovl %edi, 12(%ecx) # store val2
  0x35e: 506310000000 | 			mrmovl 16(%ebx), %esi #val1
  0x364: 6277         | 			andl %edi, %edi
  0x366: 7171030000   | 			jle restloop64
  0x36b: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x371: 406110000000 | restloop64: rmmovl %esi, 16(%ecx) # store val1
  0x377: 507314000000 | 			mrmovl 20(%ebx), %edi #val2
  0x37d: 6266         | 			andl %esi, %esi
  0x37f: 718a030000   | 			jle restloop65
  0x384: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x38a: 407114000000 | restloop65: rmmovl %edi, 20(%ecx)
  0x390: 6277         | 			andl %edi, %edi
  0x392: 7156040000   | 			jle Done
  0x397: c0f001000000 | 			iaddl $1, %eax
  0x39d: 7056040000   | 			jmp Done
                      | 
                      | 
  0x3a2: 506300000000 | restloop7:  mrmovl (%ebx), %esi # val1
  0x3a8: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x3ae: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x3b4: 6266         | 			andl %esi, %esi # val1 <=0?
  0x3b6: 71c1030000   | 			jle restloop71 # if so, go to next loop
  0x3bb: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x3c1: 407104000000 | restloop71: rmmovl %edi, 4(%ecx) # store val2
  0x3c7: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x3cd: 6277         | 			andl %edi, %edi
  0x3cf: 71da030000   | 			jle restloop72
  0x3d4: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x3da: 406108000000 | restloop72: rmmovl %esi, 8(%ecx) # store val1
  0x3e0: 50730c000000 | 			mrmovl 12(%ebx), %edi #val2
  0x3e6: 6266         | 			andl %esi, %esi
  0x3e8: 71f3030000   | 			jle restloop73
  0x3ed: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x3f3: 40710c000000 | restloop73: rmmovl %edi, 12(%ecx) # store val2
  0x3f9: 506310000000 | 			mrmovl 16(%ebx), %esi #val1
  0x3ff: 6277         | 			andl %edi, %edi
  0x401: 710c040000   | 			jle restloop74
  0x406: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x40c: 406110000000 | restloop74: rmmovl %esi, 16(%ecx) # store val1
  0x412: 507314000000 | 			mrmovl 20(%ebx), %edi #val2
  0x418: 6266         | 			andl %esi, %esi
  0x41a: 7125040000   | 			jle restloop75
  0x41f: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x425: 407114000000 | restloop75: rmmovl %edi, 20(%ecx) 
  0x42b: 506318000000 | 			mrmovl 24(%ebx), %esi 
  0x431: 6277         | 			andl %edi, %edi
  0x433: 713e040000   | 			jle restloop76
  0x438: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x43e: 406118000000 | restloop76: rmmovl %esi, 24(%ecx)
  0x444: 6266         | 			andl %esi, %esi
  0x446: 7156040000   | 			jle Done
  0x44b: c0f001000000 | 			iaddl $1, %eax
  0x451: 7056040000   | 			jmp Done
                      | 
                      | ###
  0x456:              | count0:
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x456:              | Done:
  0x456: b07f         | 	popl %edi               # Restore callee-save registers
  0x458: b03f         | 	popl %ebx
  0x45a: b06f         | 	popl %esi
  0x45c: 2054         | 	rrmovl %ebp, %esp
  0x45e: b05f         | 	popl %ebp
  0x460: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x461:              | End:
                      | #/* $end ncopy-ys */
  0x461:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x464:              | 	.align 4
  0x464:              | src:
  0x464: ffffffff     | 	.long -1
  0x468: 02000000     | 	.long 2
  0x46c: fdffffff     | 	.long -3
  0x470: fcffffff     | 	.long -4
  0x474: fbffffff     | 	.long -5
  0x478: faffffff     | 	.long -6
  0x47c: f9ffffff     | 	.long -7
  0x480: 08000000     | 	.long 8
  0x484: f7ffffff     | 	.long -9
  0x488: 0a000000     | 	.long 10
  0x48c: 0b000000     | 	.long 11
  0x490: 0c000000     | 	.long 12
  0x494: 0d000000     | 	.long 13
  0x498: f2ffffff     | 	.long -14
  0x49c: f1ffffff     | 	.long -15
  0x4a0: 10000000     | 	.long 16
  0x4a4: 11000000     | 	.long 17
  0x4a8: 12000000     | 	.long 18
  0x4ac: 13000000     | 	.long 19
  0x4b0: 14000000     | 	.long 20
  0x4b4: ebffffff     | 	.long -21
  0x4b8: 16000000     | 	.long 22
  0x4bc: 17000000     | 	.long 23
  0x4c0: 18000000     | 	.long 24
  0x4c4: e7ffffff     | 	.long -25
  0x4c8: e6ffffff     | 	.long -26
  0x4cc: e5ffffff     | 	.long -27
  0x4d0: 1c000000     | 	.long 28
  0x4d4: 1d000000     | 	.long 29
  0x4d8: 1e000000     | 	.long 30
  0x4dc: 1f000000     | 	.long 31
  0x4e0: 20000000     | 	.long 32
  0x4e4: dfffffff     | 	.long -33
  0x4e8: deffffff     | 	.long -34
  0x4ec: 23000000     | 	.long 35
  0x4f0: dcffffff     | 	.long -36
  0x4f4: dbffffff     | 	.long -37
  0x4f8: 26000000     | 	.long 38
  0x4fc: d9ffffff     | 	.long -39
  0x500: 28000000     | 	.long 40
  0x504: d7ffffff     | 	.long -41
  0x508: d6ffffff     | 	.long -42
  0x50c: d5ffffff     | 	.long -43
  0x510: d4ffffff     | 	.long -44
  0x514: d3ffffff     | 	.long -45
  0x518: d2ffffff     | 	.long -46
  0x51c: 2f000000     | 	.long 47
  0x520: 30000000     | 	.long 48
  0x524: 31000000     | 	.long 49
  0x528: 32000000     | 	.long 50
  0x52c: 33000000     | 	.long 51
  0x530: ccffffff     | 	.long -52
  0x534: cbffffff     | 	.long -53
  0x538: caffffff     | 	.long -54
  0x53c: 37000000     | 	.long 55
  0x540: c8ffffff     | 	.long -56
  0x544: 39000000     | 	.long 57
  0x548: c6ffffff     | 	.long -58
  0x54c: 3b000000     | 	.long 59
  0x550: c4ffffff     | 	.long -60
  0x554: c3ffffff     | 	.long -61
  0x558: c2ffffff     | 	.long -62
  0x55c: 3f000000     | 	.long 63
  0x560: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x570:              | 	.align 16
  0x570:              | Predest:
  0x570: fadebc00     | 	.long 0xbcdefa
  0x574:              | dest:
  0x574: abefcd00     | 	.long 0xcdefab
  0x578: abefcd00     | 	.long 0xcdefab
  0x57c: abefcd00     | 	.long 0xcdefab
  0x580: abefcd00     | 	.long 0xcdefab
  0x584: abefcd00     | 	.long 0xcdefab
  0x588: abefcd00     | 	.long 0xcdefab
  0x58c: abefcd00     | 	.long 0xcdefab
  0x590: abefcd00     | 	.long 0xcdefab
  0x594: abefcd00     | 	.long 0xcdefab
  0x598: abefcd00     | 	.long 0xcdefab
  0x59c: abefcd00     | 	.long 0xcdefab
  0x5a0: abefcd00     | 	.long 0xcdefab
  0x5a4: abefcd00     | 	.long 0xcdefab
  0x5a8: abefcd00     | 	.long 0xcdefab
  0x5ac: abefcd00     | 	.long 0xcdefab
  0x5b0: abefcd00     | 	.long 0xcdefab
  0x5b4: abefcd00     | 	.long 0xcdefab
  0x5b8: abefcd00     | 	.long 0xcdefab
  0x5bc: abefcd00     | 	.long 0xcdefab
  0x5c0: abefcd00     | 	.long 0xcdefab
  0x5c4: abefcd00     | 	.long 0xcdefab
  0x5c8: abefcd00     | 	.long 0xcdefab
  0x5cc: abefcd00     | 	.long 0xcdefab
  0x5d0: abefcd00     | 	.long 0xcdefab
  0x5d4: abefcd00     | 	.long 0xcdefab
  0x5d8: abefcd00     | 	.long 0xcdefab
  0x5dc: abefcd00     | 	.long 0xcdefab
  0x5e0: abefcd00     | 	.long 0xcdefab
  0x5e4: abefcd00     | 	.long 0xcdefab
  0x5e8: abefcd00     | 	.long 0xcdefab
  0x5ec: abefcd00     | 	.long 0xcdefab
  0x5f0: abefcd00     | 	.long 0xcdefab
  0x5f4: abefcd00     | 	.long 0xcdefab
  0x5f8: abefcd00     | 	.long 0xcdefab
  0x5fc: abefcd00     | 	.long 0xcdefab
  0x600: abefcd00     | 	.long 0xcdefab
  0x604: abefcd00     | 	.long 0xcdefab
  0x608: abefcd00     | 	.long 0xcdefab
  0x60c: abefcd00     | 	.long 0xcdefab
  0x610: abefcd00     | 	.long 0xcdefab
  0x614: abefcd00     | 	.long 0xcdefab
  0x618: abefcd00     | 	.long 0xcdefab
  0x61c: abefcd00     | 	.long 0xcdefab
  0x620: abefcd00     | 	.long 0xcdefab
  0x624: abefcd00     | 	.long 0xcdefab
  0x628: abefcd00     | 	.long 0xcdefab
  0x62c: abefcd00     | 	.long 0xcdefab
  0x630: abefcd00     | 	.long 0xcdefab
  0x634: abefcd00     | 	.long 0xcdefab
  0x638: abefcd00     | 	.long 0xcdefab
  0x63c: abefcd00     | 	.long 0xcdefab
  0x640: abefcd00     | 	.long 0xcdefab
  0x644: abefcd00     | 	.long 0xcdefab
  0x648: abefcd00     | 	.long 0xcdefab
  0x64c: abefcd00     | 	.long 0xcdefab
  0x650: abefcd00     | 	.long 0xcdefab
  0x654: abefcd00     | 	.long 0xcdefab
  0x658: abefcd00     | 	.long 0xcdefab
  0x65c: abefcd00     | 	.long 0xcdefab
  0x660: abefcd00     | 	.long 0xcdefab
  0x664: abefcd00     | 	.long 0xcdefab
  0x668: abefcd00     | 	.long 0xcdefab
  0x66c: abefcd00     | 	.long 0xcdefab
  0x670:              | Postdest:
  0x670: bcfade00     | 	.long 0xdefabc
                      | 
  0x674:              | .align 4
                      | # Run time stack
  0x674: 00000000     | 	.long 0
  0x678: 00000000     | 	.long 0
  0x67c: 00000000     | 	.long 0
  0x680: 00000000     | 	.long 0
  0x684: 00000000     | 	.long 0
  0x688: 00000000     | 	.long 0
  0x68c: 00000000     | 	.long 0
  0x690: 00000000     | 	.long 0
  0x694: 00000000     | 	.long 0
  0x698: 00000000     | 	.long 0
  0x69c: 00000000     | 	.long 0
  0x6a0: 00000000     | 	.long 0
  0x6a4: 00000000     | 	.long 0
  0x6a8: 00000000     | 	.long 0
  0x6ac: 00000000     | 	.long 0
  0x6b0: 00000000     | 	.long 0
                      | 
  0x6b4:              | Stack:

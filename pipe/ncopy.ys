# Yanjie Ze 519021910706
# Zhenyu Tang
# 
# score: 60/60, 8.93 (recent 10 tests: 8.92x7, 8.93x2, 8.91x1)
#
# idea: 
# loop unrolling 6 times 
# + solving load use hazard 
# + binary search tree
# + jumps rearrangement according to AT

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy: pushl %ebp # Save old frame pointer
rrmovl %esp,%ebp # Set up new frame pointer
pushl %esi # Save callee-save regs
pushl %ebx
pushl %edi
mrmovl 8(%ebp),%ebx # src
mrmovl 16(%ebp),%edx # len
mrmovl 12(%ebp),%ecx # dst

##################################################################
# You can modify this portion
# Loop header
xorl %eax,%eax # count = 0;
iaddl $-6, %edx # len = len - 6
jl restjudge # if len<0, goto rest:

loop1: mrmovl (%ebx), %esi # val1
mrmovl 4(%ebx), %edi # val2
rmmovl %esi, (%ecx) # store val1
andl %esi, %esi # val1 <=0?
jle loop2 # if so, go to next loop
iaddl $1, %eax # count ++

loop2: mrmovl 8(%ebx), %esi # val1
rmmovl %edi, 4(%ecx) # store val2
andl %edi, %edi # val2 <=0?
jle loop3 # if so, go to next loop
iaddl $1, %eax # count ++

loop3: mrmovl 12(%ebx), %edi # val2
rmmovl %esi, 8(%ecx) # store val1
andl %esi, %esi # val1 <=0?
jle loop4 # if so, go to next loop
iaddl $1, %eax # count ++

loop4: mrmovl 16(%ebx), %esi # val1
rmmovl %edi, 12(%ecx) # store val2
andl %edi, %edi # val2 <=0?
jle loop5 # if so, go to next loop
iaddl $1, %eax # count ++

loop5: mrmovl 20(%ebx), %edi # val2
rmmovl %esi, 16(%ecx) # store val1
andl %esi, %esi # val1 <=0?
jle loop6 # if so, go to next loop
iaddl $1, %eax # count ++

loop6: 
rmmovl %edi, 20(%ecx) # store val2
andl %edi, %edi # val2 <=0?
jle update # if so, go to update, since this is the final loop
iaddl $1, %eax # count ++

update: iaddl $24, %ebx # update
iaddl $24, %ecx # update
iaddl $-6, %edx # len -= 6
jge loop1 # if len >= 0, go to new loop1
### rest loop ###
# (Ze commented: the basic idea is to add back to the original value,
#	then compared to find the corresponding unroll)
#
# binary search
# (Tang commented: always taken strategy, 
# suppose the data is uniformly distributed,
# therefore rearranged the jumps)
restjudge:
	iaddl $3, %edx # -5,-4,-3,-2,-1(1,2,3,4,5)
	jl searchleft # jump to left tree (1,2)
	jg searchright # jump to right tree (4,5)
	jmp restloop3 # jump to 3
searchright: # right tree(4,5)
	iaddl $-1, %edx
	je restloop4
	jmp restloop5
searchleft: # left tree(1,2)
	iaddl $2, %edx
	je restloop1
	jg restloop2
	jmp Done


### search finish ###
### begin unrolling ###
restloop1: mrmovl (%ebx), %esi 
rmmovl %esi, (%ecx)
andl %esi, %esi
jle Done # finish
iaddl $1, %eax 
jmp Done

restloop2: mrmovl (%ebx), %esi # val1
mrmovl 4(%ebx), %edi # val2
rmmovl %esi, (%ecx) # store val1
andl %esi, %esi # val1 <=0?
jle restloop21 # if so, go to next loop
iaddl $1, %eax # count ++

restloop21: rmmovl %edi, 4(%ecx)
andl %edi, %edi
jle Done
iaddl $1, %eax
jmp Done

restloop3: mrmovl (%ebx), %esi # val1
mrmovl 4(%ebx), %edi # val2
rmmovl %esi, (%ecx) # store val1
andl %esi, %esi # val1 <=0?
jle restloop31 # if so, go to next loop
iaddl $1, %eax # count ++

restloop31: rmmovl %edi, 4(%ecx) # store val2
mrmovl 8(%ebx), %esi #val1
andl %edi, %edi
jle restloop32
iaddl $1, %eax

restloop32: rmmovl %esi, 8(%ecx)
andl %esi, %esi
jle Done
iaddl $1, %eax
jmp Done

restloop4: mrmovl (%ebx), %esi # val1
mrmovl 4(%ebx), %edi # val2
rmmovl %esi, (%ecx) # store val1
andl %esi, %esi # val1 <=0?
jle restloop41 # if so, go to next loop
iaddl $1, %eax # count ++

restloop41: rmmovl %edi, 4(%ecx) # store val2
mrmovl 8(%ebx), %esi #val1
andl %edi, %edi
jle restloop42
iaddl $1, %eax

restloop42: rmmovl %esi, 8(%ecx) # store val1
mrmovl 12(%ebx), %edi #val2
andl %esi, %esi
jle restloop43
iaddl $1, %eax

restloop43: rmmovl %edi, 12(%ecx)
andl %edi, %edi
jle Done
iaddl $1, %eax
jmp Done

restloop5: mrmovl (%ebx), %esi # val1
mrmovl 4(%ebx), %edi # val2
rmmovl %esi, (%ecx) # store val1
andl %esi, %esi # val1 <=0?
jle restloop51 # if so, go to next loop
iaddl $1, %eax # count ++

restloop51: rmmovl %edi, 4(%ecx) # store val2
mrmovl 8(%ebx), %esi #val1
andl %edi, %edi
jle restloop52
iaddl $1, %eax

restloop52: rmmovl %esi, 8(%ecx) # store val1
mrmovl 12(%ebx), %edi #val2
andl %esi, %esi
jle restloop53
iaddl $1, %eax

restloop53: rmmovl %edi, 12(%ecx) 
mrmovl 16(%ebx), %esi 
andl %edi, %edi
jle restloop54
iaddl $1, %eax

restloop54: rmmovl %esi, 16(%ecx)
andl %esi, %esi
jle Done
iaddl $1, %eax
jmp Done

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
popl %edi # Restore callee-save registers
popl %ebx
popl %esi
rrmovl %ebp, %esp
popl %ebp
ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */


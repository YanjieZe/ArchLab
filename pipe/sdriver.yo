                      | #######################################################################
                      | # Test for copying block of size 4;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f4b8010000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f5b8010000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f004000000 | 	irmovl $4, %eax		# src and dst have 4 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f064010000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f04c010000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | # Yanjie Ze 519021910706
                      | # score: 30/60
                      | # idea: loop unrolling 6 times
                      | 
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x046: 6300         | 	xorl %eax,%eax		# count = 0;
  0x048: c0f2faffffff | 	iaddl $-6, %edx    # len = len - 6
  0x04e: 7200010000   | 	jl restjudge		# if len<0, goto rest:
                      | 
  0x053: 506300000000 | loop1:	mrmovl (%ebx), %esi # val1
  0x059: 507304000000 | 		mrmovl 4(%ebx), %edi # val2
  0x05f: 406100000000 | 		rmmovl %esi, (%ecx) # store val1
  0x065: 6266         | 		andl %esi, %esi # val1 <=0?
  0x067: 7172000000   | 		jle loop2 # if so, go to next loop
  0x06c: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x072: 506308000000 | loop2:	mrmovl 8(%ebx), %esi # val1
  0x078: 407104000000 | 		rmmovl %edi, 4(%ecx) # store val2
  0x07e: 6277         | 		andl %edi, %edi # val2 <=0?
  0x080: 718b000000   | 		jle loop3 # if so, go to next loop
  0x085: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x08b: 50730c000000 | loop3:	mrmovl 12(%ebx), %edi # val2
  0x091: 406108000000 | 		rmmovl %esi, 8(%ecx) # store val1
  0x097: 6266         | 		andl %esi, %esi # val1 <=0?
  0x099: 71a4000000   | 		jle loop4 # if so, go to next loop
  0x09e: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0a4: 506310000000 | loop4:	mrmovl 16(%ebx), %esi # val1
  0x0aa: 40710c000000 | 		rmmovl %edi, 12(%ecx) # store val2
  0x0b0: 6277         | 		andl %edi, %edi # val2 <=0?
  0x0b2: 71bd000000   | 		jle loop5 # if so, go to next loop
  0x0b7: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0bd: 507314000000 | loop5:	mrmovl 20(%ebx), %edi # val2
  0x0c3: 406110000000 | 		rmmovl %esi, 16(%ecx) # store val1
  0x0c9: 6266         | 		andl %esi, %esi # val1 <=0?
  0x0cb: 71d6000000   | 		jle loop6 # if so, go to next loop
  0x0d0: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
                      | 
  0x0d6:              | loop6:	
  0x0d6: 407114000000 | 		rmmovl %edi, 20(%ecx) # store val2
  0x0dc: 6277         | 		andl %edi, %edi # val2 <=0?
  0x0de: 71e9000000   | 		jle update # if so, go to update, since this is the final loop
  0x0e3: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0e9: c0f318000000 | update: iaddl $24, %ebx # update
  0x0ef: c0f118000000 | 		iaddl $24, %ecx # update
  0x0f5: c0f2faffffff | 		iaddl $-6, %edx # len -= 6
  0x0fb: 7553000000   | 		jge loop1 # if len >= 0, go to new loop1
                      | 		
                      | ### rest loop ###
  0x100:              | restjudge:
  0x100: c0f206000000 | 	iaddl $6, %edx # len<=0 for now, len=len+6 >=0
  0x106: 713f010000   | 	jle count0 # if len<=0, end; else need to finish the rest
                      | 
  0x10b:              | restloop:
  0x10b: 506300000000 | 	mrmovl (%ebx), %esi	# read val from src...
  0x111: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x117: 6266         | 	andl %esi, %esi		# val <= 0?
  0x119: 7124010000   | 	jle Npos		# if so, goto Npos:
  0x11e: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x124: 30f701000000 | Npos:	irmovl $1, %edi
  0x12a: 6172         | 	subl %edi, %edx		# len--
  0x12c: c0f304000000 | 	iaddl $4, %ebx		# src++
  0x132: c0f104000000 | 	iaddl $4, %ecx		# dst++
  0x138: 6222         | 	andl %edx,%edx		# len > 0?
  0x13a: 760b010000   | 	jg restloop			# if so, goto Loop:
                      | 
  0x13f:              | count0:
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x13f:              | Done:
  0x13f: b07f         | 	popl %edi               # Restore callee-save registers
  0x141: b03f         | 	popl %ebx
  0x143: b06f         | 	popl %esi
  0x145: 2054         | 	rrmovl %ebp, %esp
  0x147: b05f         | 	popl %ebp
  0x149: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x14a:              | End:
                      | #/* $end ncopy-ys */
  0x14a:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x14c:              | 	.align 4
  0x14c:              | src:
  0x14c: 01000000     | 	.long 1
  0x150: feffffff     | 	.long -2
  0x154: fdffffff     | 	.long -3
  0x158: 04000000     | 	.long 4
  0x15c: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x160:              | 	.align 16
  0x160:              | Predest:
  0x160: fadebc00     | 	.long 0xbcdefa
  0x164:              | dest:
  0x164: abefcd00     | 	.long 0xcdefab
  0x168: abefcd00     | 	.long 0xcdefab
  0x16c: abefcd00     | 	.long 0xcdefab
  0x170: abefcd00     | 	.long 0xcdefab
  0x174:              | Postdest:
  0x174: bcfade00     | 	.long 0xdefabc
                      | 
  0x178:              | .align 4
                      | # Run time stack
  0x178: 00000000     | 	.long 0
  0x17c: 00000000     | 	.long 0
  0x180: 00000000     | 	.long 0
  0x184: 00000000     | 	.long 0
  0x188: 00000000     | 	.long 0
  0x18c: 00000000     | 	.long 0
  0x190: 00000000     | 	.long 0
  0x194: 00000000     | 	.long 0
  0x198: 00000000     | 	.long 0
  0x19c: 00000000     | 	.long 0
  0x1a0: 00000000     | 	.long 0
  0x1a4: 00000000     | 	.long 0
  0x1a8: 00000000     | 	.long 0
  0x1ac: 00000000     | 	.long 0
  0x1b0: 00000000     | 	.long 0
  0x1b4: 00000000     | 	.long 0
                      | 
  0x1b8:              | Stack:

                      | #######################################################################
                      | # Test for copying block of size 4;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f448030000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f548030000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f004000000 | 	irmovl $4, %eax		# src and dst have 4 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f0f4020000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f0d8020000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | # Yanjie Ze 519021910706
                      | # score: 
                      | # idea: loop unrolling 6 times + solving load use hazard 
                      | #		+ binary search
                      | 
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x046: 6300         | 	xorl %eax,%eax		# count = 0;
  0x048: c0f2faffffff | 	iaddl $-6, %edx    # len = len - 6
  0x04e: 7200010000   | 	jl restjudge		# if len<0, goto rest:
                      | 
  0x053: 506300000000 | loop1:	mrmovl (%ebx), %esi # val1
  0x059: 507304000000 | 		mrmovl 4(%ebx), %edi # val2
  0x05f: 406100000000 | 		rmmovl %esi, (%ecx) # store val1
  0x065: 6266         | 		andl %esi, %esi # val1 <=0?
  0x067: 7172000000   | 		jle loop2 # if so, go to next loop
  0x06c: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x072: 506308000000 | loop2:	mrmovl 8(%ebx), %esi # val1
  0x078: 407104000000 | 		rmmovl %edi, 4(%ecx) # store val2
  0x07e: 6277         | 		andl %edi, %edi # val2 <=0?
  0x080: 718b000000   | 		jle loop3 # if so, go to next loop
  0x085: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x08b: 50730c000000 | loop3:	mrmovl 12(%ebx), %edi # val2
  0x091: 406108000000 | 		rmmovl %esi, 8(%ecx) # store val1
  0x097: 6266         | 		andl %esi, %esi # val1 <=0?
  0x099: 71a4000000   | 		jle loop4 # if so, go to next loop
  0x09e: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0a4: 506310000000 | loop4:	mrmovl 16(%ebx), %esi # val1
  0x0aa: 40710c000000 | 		rmmovl %edi, 12(%ecx) # store val2
  0x0b0: 6277         | 		andl %edi, %edi # val2 <=0?
  0x0b2: 71bd000000   | 		jle loop5 # if so, go to next loop
  0x0b7: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0bd: 507314000000 | loop5:	mrmovl 20(%ebx), %edi # val2
  0x0c3: 406110000000 | 		rmmovl %esi, 16(%ecx) # store val1
  0x0c9: 6266         | 		andl %esi, %esi # val1 <=0?
  0x0cb: 71d6000000   | 		jle loop6 # if so, go to next loop
  0x0d0: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
                      | 
  0x0d6:              | loop6:	
  0x0d6: 407114000000 | 		rmmovl %edi, 20(%ecx) # store val2
  0x0dc: 6277         | 		andl %edi, %edi # val2 <=0?
  0x0de: 71e9000000   | 		jle update # if so, go to update, since this is the final loop
  0x0e3: c0f001000000 | 		iaddl $1, %eax # count ++
                      | 
  0x0e9: c0f318000000 | update: iaddl $24, %ebx # update
  0x0ef: c0f118000000 | 		iaddl $24, %ecx # update
  0x0f5: c0f2faffffff | 		iaddl $-6, %edx # len -= 6
  0x0fb: 7553000000   | 		jge loop1 # if len >= 0, go to new loop1
                      | 		
                      | ### rest loop ###
  0x100:              | restjudge:
  0x100: c0f206000000 | 	iaddl $6, %edx # len<=0 before, len=len+6 >=0 now
  0x106: 71cb020000   | 	jle count0 # if len<=0, end; else need to finish the rest
                      | 
  0x10b:              | searchmid:# possible value: 1,2,3,4,5
  0x10b: c0f2fdffffff | 	iaddl $-3, %edx # sub3: -2,-1,0,1,2
  0x111: 7390010000   | 	je restloop3 # len = 3, jump
  0x116: 722b010000   | 	jl searchleft # len < 3, jump
                      | 
  0x11b:              | searchright:# possible value: 1,2(4,5)
  0x11b: c0f2ffffffff | 	iaddl $-1, %edx
  0x121: 73e0010000   | 	je restloop4
  0x126: 7049020000   | 	jmp restloop5
                      | 
                      | 
  0x12b:              | searchleft: # possible value: -2,-1(1,2)
  0x12b: c0f202000000 | 	iaddl $2, %edx # 0,1
  0x131: 733b010000   | 	je restloop1
  0x136: 7059010000   | 	jmp restloop2
                      | 
                      | ### search finish ###
                      | ### begin unrolling ###
  0x13b: 506300000000 | restloop1: 	mrmovl (%ebx), %esi 
  0x141: 406100000000 | 			rmmovl %esi, (%ecx)
  0x147: 6266         | 			andl %esi, %esi
  0x149: 71cb020000   | 			jle Done # finish
  0x14e: c0f001000000 | 			iaddl $1, %eax 
  0x154: 70cb020000   | 			jmp Done
                      | 
  0x159: 506300000000 | restloop2:  mrmovl (%ebx), %esi # val1
  0x15f: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x165: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x16b: 6266         | 			andl %esi, %esi # val1 <=0?
  0x16d: 7178010000   | 			jle restloop21 # if so, go to next loop
  0x172: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x178: 407104000000 | restloop21: rmmovl %edi, 4(%ecx)
  0x17e: 6277         | 			andl %edi, %edi
  0x180: 71cb020000   | 			jle Done
  0x185: c0f001000000 | 			iaddl $1, %eax
  0x18b: 70cb020000   | 			jmp Done
                      | 
  0x190: 506300000000 | restloop3:  mrmovl (%ebx), %esi # val1
  0x196: 507304000000 | 			mrmovl 4(%ebx), %edi # val2
  0x19c: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x1a2: 6266         | 			andl %esi, %esi # val1 <=0?
  0x1a4: 71af010000   | 			jle restloop31 # if so, go to next loop
  0x1a9: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x1af: 407104000000 | restloop31: rmmovl %edi, 4(%ecx) # store val2
  0x1b5: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x1bb: 6277         | 			andl %edi, %edi
  0x1bd: 71c8010000   | 			jle restloop32
  0x1c2: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x1c8: 406108000000 | restloop32: rmmovl %esi, 8(%ecx)
  0x1ce: 6266         | 			andl %esi, %esi
  0x1d0: 71cb020000   | 			jle Done
  0x1d5: c0f001000000 | 			iaddl $1, %eax
  0x1db: 70cb020000   | 			jmp Done
                      | 
  0x1e0: 506300000000 | restloop4:  mrmovl (%ebx), %esi # val1
  0x1e6: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x1ec: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x1f2: 6266         | 			andl %esi, %esi # val1 <=0?
  0x1f4: 71ff010000   | 			jle restloop41 # if so, go to next loop
  0x1f9: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x1ff: 407104000000 | restloop41: rmmovl %edi, 4(%ecx) # store val2
  0x205: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x20b: 6277         | 			andl %edi, %edi
  0x20d: 7118020000   | 			jle restloop42
  0x212: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x218: 406108000000 | restloop42: rmmovl %esi, 8(%ecx) # store val1
  0x21e: 50730c000000 | 			mrmovl 12(%ebx), %edi #val2
  0x224: 6266         | 			andl %esi, %esi
  0x226: 7131020000   | 			jle restloop43
  0x22b: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x231: 40710c000000 | restloop43: rmmovl %edi, 12(%ecx)
  0x237: 6277         | 			andl %edi, %edi
  0x239: 71cb020000   | 			jle Done
  0x23e: c0f001000000 | 			iaddl $1, %eax
  0x244: 70cb020000   | 			jmp Done
                      | 
  0x249: 506300000000 | restloop5:  mrmovl (%ebx), %esi # val1
  0x24f: 507304000000 | 		    mrmovl 4(%ebx), %edi # val2
  0x255: 406100000000 | 			rmmovl %esi, (%ecx) # store val1
  0x25b: 6266         | 			andl %esi, %esi # val1 <=0?
  0x25d: 7168020000   | 			jle restloop51 # if so, go to next loop
  0x262: c0f001000000 | 			iaddl $1, %eax # count ++
                      | 
  0x268: 407104000000 | restloop51: rmmovl %edi, 4(%ecx) # store val2
  0x26e: 506308000000 | 			mrmovl 8(%ebx), %esi #val1
  0x274: 6277         | 			andl %edi, %edi
  0x276: 7181020000   | 			jle restloop52
  0x27b: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x281: 406108000000 | restloop52: rmmovl %esi, 8(%ecx) # store val1
  0x287: 50730c000000 | 			mrmovl 12(%ebx), %edi #val2
  0x28d: 6266         | 			andl %esi, %esi
  0x28f: 719a020000   | 			jle restloop53
  0x294: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x29a: 40710c000000 | restloop53: rmmovl %edi, 12(%ecx) 
  0x2a0: 506310000000 | 			mrmovl 16(%ebx), %esi 
  0x2a6: 6277         | 			andl %edi, %edi
  0x2a8: 71b3020000   | 			jle restloop54
  0x2ad: c0f001000000 | 			iaddl $1, %eax
                      | 
  0x2b3: 406110000000 | restloop54: rmmovl %esi, 16(%ecx)
  0x2b9: 6266         | 			andl %esi, %esi
  0x2bb: 71cb020000   | 			jle Done
  0x2c0: c0f001000000 | 			iaddl $1, %eax
  0x2c6: 70cb020000   | 			jmp Done
                      | ###
  0x2cb:              | count0:
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x2cb:              | Done:
  0x2cb: b07f         | 	popl %edi               # Restore callee-save registers
  0x2cd: b03f         | 	popl %ebx
  0x2cf: b06f         | 	popl %esi
  0x2d1: 2054         | 	rrmovl %ebp, %esp
  0x2d3: b05f         | 	popl %ebp
  0x2d5: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x2d6:              | End:
                      | #/* $end ncopy-ys */
  0x2d6:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x2d8:              | 	.align 4
  0x2d8:              | src:
  0x2d8: ffffffff     | 	.long -1
  0x2dc: 02000000     | 	.long 2
  0x2e0: 03000000     | 	.long 3
  0x2e4: fcffffff     | 	.long -4
  0x2e8: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x2f0:              | 	.align 16
  0x2f0:              | Predest:
  0x2f0: fadebc00     | 	.long 0xbcdefa
  0x2f4:              | dest:
  0x2f4: abefcd00     | 	.long 0xcdefab
  0x2f8: abefcd00     | 	.long 0xcdefab
  0x2fc: abefcd00     | 	.long 0xcdefab
  0x300: abefcd00     | 	.long 0xcdefab
  0x304:              | Postdest:
  0x304: bcfade00     | 	.long 0xdefabc
                      | 
  0x308:              | .align 4
                      | # Run time stack
  0x308: 00000000     | 	.long 0
  0x30c: 00000000     | 	.long 0
  0x310: 00000000     | 	.long 0
  0x314: 00000000     | 	.long 0
  0x318: 00000000     | 	.long 0
  0x31c: 00000000     | 	.long 0
  0x320: 00000000     | 	.long 0
  0x324: 00000000     | 	.long 0
  0x328: 00000000     | 	.long 0
  0x32c: 00000000     | 	.long 0
  0x330: 00000000     | 	.long 0
  0x334: 00000000     | 	.long 0
  0x338: 00000000     | 	.long 0
  0x33c: 00000000     | 	.long 0
  0x340: 00000000     | 	.long 0
  0x344: 00000000     | 	.long 0
                      | 
  0x348:              | Stack:

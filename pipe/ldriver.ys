#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $63, %eax		# src and dst have 63 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
StartFun:
# Yanjie Ze 519021910706
# score: 60/60, 8.94
# idea: loop unrolling 6 times + solving load use hazard 
# + binary search

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy: pushl %ebp # Save old frame pointer
rrmovl %esp,%ebp # Set up new frame pointer
pushl %esi # Save callee-save regs
pushl %ebx
pushl %edi
mrmovl 8(%ebp),%ebx # src
mrmovl 16(%ebp),%edx # len
mrmovl 12(%ebp),%ecx # dst

##################################################################
# You can modify this portion
# Loop header
xorl %eax,%eax # count = 0;
iaddl $-6, %edx # len = len - 6
jl restjudge # if len<0, goto rest:

loop1: mrmovl (%ebx), %esi # val1
mrmovl 4(%ebx), %edi # val2
rmmovl %esi, (%ecx) # store val1
andl %esi, %esi # val1 <=0?
jle loop2 # if so, go to next loop
iaddl $1, %eax # count ++

loop2: mrmovl 8(%ebx), %esi # val1
rmmovl %edi, 4(%ecx) # store val2
andl %edi, %edi # val2 <=0?
jle loop3 # if so, go to next loop
iaddl $1, %eax # count ++

loop3: mrmovl 12(%ebx), %edi # val2
rmmovl %esi, 8(%ecx) # store val1
andl %esi, %esi # val1 <=0?
jle loop4 # if so, go to next loop
iaddl $1, %eax # count ++

loop4: mrmovl 16(%ebx), %esi # val1
rmmovl %edi, 12(%ecx) # store val2
andl %edi, %edi # val2 <=0?
jle loop5 # if so, go to next loop
iaddl $1, %eax # count ++

loop5: mrmovl 20(%ebx), %edi # val2
rmmovl %esi, 16(%ecx) # store val1
andl %esi, %esi # val1 <=0?
jle loop6 # if so, go to next loop
iaddl $1, %eax # count ++

loop6: 
rmmovl %edi, 20(%ecx) # store val2
andl %edi, %edi # val2 <=0?
jle update # if so, go to update, since this is the final loop
iaddl $1, %eax # count ++

update: iaddl $24, %ebx # update
iaddl $24, %ecx # update
iaddl $-6, %edx # len -= 6
jge loop1 # if len >= 0, go to new loop1
### rest loop ###
# binary search
restjudge:
	iaddl $3, %edx
	jl searchleft
	je restloop3
	iaddl $-1, %edx
	je restloop4
	jmp restloop5
searchleft:
	iaddl $2, %edx
	je restloop1
	jl Done
	jmp restloop2


### search finish ###
### begin unrolling ###
restloop1: mrmovl (%ebx), %esi 
rmmovl %esi, (%ecx)
andl %esi, %esi
jle Done # finish
iaddl $1, %eax 
jmp Done

restloop2: mrmovl (%ebx), %esi # val1
mrmovl 4(%ebx), %edi # val2
rmmovl %esi, (%ecx) # store val1
andl %esi, %esi # val1 <=0?
jle restloop21 # if so, go to next loop
iaddl $1, %eax # count ++

restloop21: rmmovl %edi, 4(%ecx)
andl %edi, %edi
jle Done
iaddl $1, %eax
jmp Done

restloop3: mrmovl (%ebx), %esi # val1
mrmovl 4(%ebx), %edi # val2
rmmovl %esi, (%ecx) # store val1
andl %esi, %esi # val1 <=0?
jle restloop31 # if so, go to next loop
iaddl $1, %eax # count ++

restloop31: rmmovl %edi, 4(%ecx) # store val2
mrmovl 8(%ebx), %esi #val1
andl %edi, %edi
jle restloop32
iaddl $1, %eax

restloop32: rmmovl %esi, 8(%ecx)
andl %esi, %esi
jle Done
iaddl $1, %eax
jmp Done

restloop4: mrmovl (%ebx), %esi # val1
mrmovl 4(%ebx), %edi # val2
rmmovl %esi, (%ecx) # store val1
andl %esi, %esi # val1 <=0?
jle restloop41 # if so, go to next loop
iaddl $1, %eax # count ++

restloop41: rmmovl %edi, 4(%ecx) # store val2
mrmovl 8(%ebx), %esi #val1
andl %edi, %edi
jle restloop42
iaddl $1, %eax

restloop42: rmmovl %esi, 8(%ecx) # store val1
mrmovl 12(%ebx), %edi #val2
andl %esi, %esi
jle restloop43
iaddl $1, %eax

restloop43: rmmovl %edi, 12(%ecx)
andl %edi, %edi
jle Done
iaddl $1, %eax
jmp Done

restloop5: mrmovl (%ebx), %esi # val1
mrmovl 4(%ebx), %edi # val2
rmmovl %esi, (%ecx) # store val1
andl %esi, %esi # val1 <=0?
jle restloop51 # if so, go to next loop
iaddl $1, %eax # count ++

restloop51: rmmovl %edi, 4(%ecx) # store val2
mrmovl 8(%ebx), %esi #val1
andl %edi, %edi
jle restloop52
iaddl $1, %eax

restloop52: rmmovl %esi, 8(%ecx) # store val1
mrmovl 12(%ebx), %edi #val2
andl %esi, %esi
jle restloop53
iaddl $1, %eax

restloop53: rmmovl %edi, 12(%ecx) 
mrmovl 16(%ebx), %esi 
andl %edi, %edi
jle restloop54
iaddl $1, %eax

restloop54: rmmovl %esi, 16(%ecx)
andl %esi, %esi
jle Done
iaddl $1, %eax
jmp Done

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
popl %edi # Restore callee-save registers
popl %ebx
popl %esi
rrmovl %ebp, %esp
popl %ebp
ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */

EndFun:

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long -1
	.long 2
	.long 3
	.long -4
	.long 5
	.long -6
	.long 7
	.long 8
	.long -9
	.long 10
	.long 11
	.long 12
	.long 13
	.long -14
	.long -15
	.long 16
	.long 17
	.long 18
	.long -19
	.long 20
	.long -21
	.long 22
	.long 23
	.long 24
	.long 25
	.long 26
	.long -27
	.long -28
	.long -29
	.long 30
	.long -31
	.long 32
	.long 33
	.long -34
	.long 35
	.long 36
	.long -37
	.long 38
	.long -39
	.long -40
	.long -41
	.long 42
	.long 43
	.long -44
	.long -45
	.long -46
	.long -47
	.long -48
	.long -49
	.long 50
	.long 51
	.long -52
	.long -53
	.long -54
	.long -55
	.long -56
	.long -57
	.long -58
	.long -59
	.long -60
	.long 61
	.long 62
	.long 63
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:

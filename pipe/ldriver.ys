#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $63, %eax		# src and dst have 63 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
StartFun:
# Yanjie Ze 519021910706

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	andl %edx, %edx 	# len<=0?
	jle count0
	rrmovl %edx, %edi 	# limit = len
	iaddl $-10, %edi     # limit = len - 10
	jle restloop		# if limit<=0, goto rest:

loop1:	mrmovl (%ebx), %esi # read val from src
		rmmovl %esi, (%ecx) # store
		andl %esi, %esi # val <=0?
		jle loop2 # if so, go to next loop
		iaddl $1, %eax # count ++

loop2:	mrmovl 4(%ebx), %esi # read val from src
		rmmovl %esi, 4(%ecx) # store
		andl %esi, %esi # val <=0?
		jle loop3 # if so, go to next loop
		iaddl $1, %eax # count ++

loop3:	mrmovl 8(%ebx), %esi # read val from src
		rmmovl %esi, 8(%ecx) # store
		andl %esi, %esi # val <=0?
		jle loop4 # if so, go to next loop
		iaddl $1, %eax # count ++

loop4:	mrmovl 12(%ebx), %esi # read val from src
		rmmovl %esi, 12(%ecx) # store
		andl %esi, %esi # val <=0?
		jle loop5 # if so, go to next loop
		iaddl $1, %eax # count ++

loop5:	mrmovl 16(%ebx), %esi # read val from src
		rmmovl %esi, 16(%ecx) # store
		andl %esi, %esi # val <=0?
		jle loop6 # if so, go to next loop
		iaddl $1, %eax # count ++

loop6:	mrmovl 20(%ebx), %esi # read val from src
		rmmovl %esi, 20(%ecx) # store
		andl %esi, %esi # val <=0?
		jle loop7 # if so, go to next loop
		iaddl $1, %eax # count ++

loop7:	mrmovl 24(%ebx), %esi # read val from src
		rmmovl %esi, 24(%ecx) # store
		andl %esi, %esi # val <=0?
		jle loop8 # if so, go to next loop
		iaddl $1, %eax # count ++

loop8:	mrmovl 28(%ebx), %esi # read val from src
		rmmovl %esi, 28(%ecx) # store
		andl %esi, %esi # val <=0?
		jle loop9 # if so, go to next loop
		iaddl $1, %eax # count ++

loop9:	mrmovl 32(%ebx), %esi # read val from src
		rmmovl %esi, 32(%ecx) # store
		andl %esi, %esi # val <=0?
		jle loop10 # if so, go to next loop
		iaddl $1, %eax # count ++

loop10:	mrmovl 36(%ebx), %esi # read val from src
		rmmovl %esi, 36(%ecx) # store
		andl %esi, %esi # val <=0?
		jle update # if so, go to update, since this is the final loop
		iaddl $1, %eax # count ++

update: iaddl $40, %ebx # update
		iaddl $40, %ecx # update
		rrmovl %edi, %edx # edx = edi(len=limit)
		iaddl $-10, %edi # limit -= 10
		jg loop1 # if limit > 0, go to new loop1
		

restloop:	
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddl $1, %eax		# count++

Npos:	irmovl $1, %edi
	subl %edi, %edx		# len--
	iaddl $4, %ebx		# src++
	iaddl $4, %ecx		# dst++
	andl %edx,%edx		# len > 0?
	jg restloop			# if so, goto Loop:

count0:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long -1
	.long 2
	.long 3
	.long 4
	.long -5
	.long -6
	.long 7
	.long -8
	.long 9
	.long -10
	.long -11
	.long 12
	.long 13
	.long -14
	.long -15
	.long 16
	.long -17
	.long -18
	.long 19
	.long -20
	.long -21
	.long 22
	.long 23
	.long 24
	.long -25
	.long -26
	.long 27
	.long -28
	.long -29
	.long 30
	.long 31
	.long -32
	.long -33
	.long -34
	.long 35
	.long 36
	.long 37
	.long 38
	.long 39
	.long -40
	.long 41
	.long 42
	.long -43
	.long -44
	.long -45
	.long -46
	.long 47
	.long -48
	.long -49
	.long -50
	.long 51
	.long 52
	.long -53
	.long 54
	.long -55
	.long -56
	.long 57
	.long -58
	.long 59
	.long 60
	.long 61
	.long 62
	.long -63
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
